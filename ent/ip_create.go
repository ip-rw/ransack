// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/ip-rw/ransack/ent/ip"
	"github.com/ip-rw/ransack/ent/machine"
)

// IPCreate is the builder for creating a IP entity.
type IPCreate struct {
	config
	mutation *IPMutation
	hooks    []Hook
}

// SetIP sets the "ip" field.
func (ic *IPCreate) SetIP(s string) *IPCreate {
	ic.mutation.SetIP(s)
	return ic
}

// SetNet sets the "net" field.
func (ic *IPCreate) SetNet(s string) *IPCreate {
	ic.mutation.SetNet(s)
	return ic
}

// SetMask sets the "mask" field.
func (ic *IPCreate) SetMask(i int) *IPCreate {
	ic.mutation.SetMask(i)
	return ic
}

// SetNillableMask sets the "mask" field if the given value is not nil.
func (ic *IPCreate) SetNillableMask(i *int) *IPCreate {
	if i != nil {
		ic.SetMask(*i)
	}
	return ic
}

// SetMachineID sets the "machine" edge to the Machine entity by ID.
func (ic *IPCreate) SetMachineID(id int) *IPCreate {
	ic.mutation.SetMachineID(id)
	return ic
}

// SetNillableMachineID sets the "machine" edge to the Machine entity by ID if the given value is not nil.
func (ic *IPCreate) SetNillableMachineID(id *int) *IPCreate {
	if id != nil {
		ic = ic.SetMachineID(*id)
	}
	return ic
}

// SetMachine sets the "machine" edge to the Machine entity.
func (ic *IPCreate) SetMachine(m *Machine) *IPCreate {
	return ic.SetMachineID(m.ID)
}

// Mutation returns the IPMutation object of the builder.
func (ic *IPCreate) Mutation() *IPMutation {
	return ic.mutation
}

// Save creates the IP in the database.
func (ic *IPCreate) Save(ctx context.Context) (*IP, error) {
	var (
		err  error
		node *IP
	)
	ic.defaults()
	if len(ic.hooks) == 0 {
		if err = ic.check(); err != nil {
			return nil, err
		}
		node, err = ic.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*IPMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = ic.check(); err != nil {
				return nil, err
			}
			ic.mutation = mutation
			node, err = ic.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(ic.hooks) - 1; i >= 0; i-- {
			mut = ic.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, ic.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (ic *IPCreate) SaveX(ctx context.Context) *IP {
	v, err := ic.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// defaults sets the default values of the builder before save.
func (ic *IPCreate) defaults() {
	if _, ok := ic.mutation.Mask(); !ok {
		v := ip.DefaultMask
		ic.mutation.SetMask(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ic *IPCreate) check() error {
	if _, ok := ic.mutation.IP(); !ok {
		return &ValidationError{Name: "ip", err: errors.New("ent: missing required field \"ip\"")}
	}
	if _, ok := ic.mutation.Net(); !ok {
		return &ValidationError{Name: "net", err: errors.New("ent: missing required field \"net\"")}
	}
	if _, ok := ic.mutation.Mask(); !ok {
		return &ValidationError{Name: "mask", err: errors.New("ent: missing required field \"mask\"")}
	}
	return nil
}

func (ic *IPCreate) sqlSave(ctx context.Context) (*IP, error) {
	_node, _spec := ic.createSpec()
	if err := sqlgraph.CreateNode(ctx, ic.driver, _spec); err != nil {
		if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	return _node, nil
}

func (ic *IPCreate) createSpec() (*IP, *sqlgraph.CreateSpec) {
	var (
		_node = &IP{config: ic.config}
		_spec = &sqlgraph.CreateSpec{
			Table: ip.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: ip.FieldID,
			},
		}
	)
	if value, ok := ic.mutation.IP(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: ip.FieldIP,
		})
		_node.IP = value
	}
	if value, ok := ic.mutation.Net(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: ip.FieldNet,
		})
		_node.Net = value
	}
	if value, ok := ic.mutation.Mask(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: ip.FieldMask,
		})
		_node.Mask = value
	}
	if nodes := ic.mutation.MachineIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   ip.MachineTable,
			Columns: []string{ip.MachineColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: machine.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.ip_machine = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// IPCreateBulk is the builder for creating many IP entities in bulk.
type IPCreateBulk struct {
	config
	builders []*IPCreate
}

// Save creates the IP entities in the database.
func (icb *IPCreateBulk) Save(ctx context.Context) ([]*IP, error) {
	specs := make([]*sqlgraph.CreateSpec, len(icb.builders))
	nodes := make([]*IP, len(icb.builders))
	mutators := make([]Mutator, len(icb.builders))
	for i := range icb.builders {
		func(i int, root context.Context) {
			builder := icb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*IPMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, icb.builders[i+1].mutation)
				} else {
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, icb.driver, &sqlgraph.BatchCreateSpec{Nodes: specs}); err != nil {
						if cerr, ok := isSQLConstraintError(err); ok {
							err = cerr
						}
					}
				}
				mutation.done = true
				if err != nil {
					return nil, err
				}
				id := specs[i].ID.Value.(int64)
				nodes[i].ID = int(id)
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, icb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (icb *IPCreateBulk) SaveX(ctx context.Context) []*IP {
	v, err := icb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}
