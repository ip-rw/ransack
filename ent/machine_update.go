// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/ip-rw/ransack/ent/ip"
	"github.com/ip-rw/ransack/ent/key"
	"github.com/ip-rw/ransack/ent/machine"
	"github.com/ip-rw/ransack/ent/predicate"
	"github.com/ip-rw/ransack/ent/user"
)

// MachineUpdate is the builder for updating Machine entities.
type MachineUpdate struct {
	config
	hooks    []Hook
	mutation *MachineMutation
}

// Where adds a new predicate for the MachineUpdate builder.
func (mu *MachineUpdate) Where(ps ...predicate.Machine) *MachineUpdate {
	mu.mutation.predicates = append(mu.mutation.predicates, ps...)
	return mu
}

// SetHwid sets the "hwid" field.
func (mu *MachineUpdate) SetHwid(s string) *MachineUpdate {
	mu.mutation.SetHwid(s)
	return mu
}

// SetHostname sets the "hostname" field.
func (mu *MachineUpdate) SetHostname(s string) *MachineUpdate {
	mu.mutation.SetHostname(s)
	return mu
}

// SetFingerprint sets the "fingerprint" field.
func (mu *MachineUpdate) SetFingerprint(s string) *MachineUpdate {
	mu.mutation.SetFingerprint(s)
	return mu
}

// AddIPIDs adds the "ips" edge to the IP entity by IDs.
func (mu *MachineUpdate) AddIPIDs(ids ...int) *MachineUpdate {
	mu.mutation.AddIPIDs(ids...)
	return mu
}

// AddIps adds the "ips" edges to the IP entity.
func (mu *MachineUpdate) AddIps(i ...*IP) *MachineUpdate {
	ids := make([]int, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return mu.AddIPIDs(ids...)
}

// AddUserIDs adds the "users" edge to the User entity by IDs.
func (mu *MachineUpdate) AddUserIDs(ids ...int) *MachineUpdate {
	mu.mutation.AddUserIDs(ids...)
	return mu
}

// AddUsers adds the "users" edges to the User entity.
func (mu *MachineUpdate) AddUsers(u ...*User) *MachineUpdate {
	ids := make([]int, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return mu.AddUserIDs(ids...)
}

// AddKeyIDs adds the "keys" edge to the Key entity by IDs.
func (mu *MachineUpdate) AddKeyIDs(ids ...int) *MachineUpdate {
	mu.mutation.AddKeyIDs(ids...)
	return mu
}

// AddKeys adds the "keys" edges to the Key entity.
func (mu *MachineUpdate) AddKeys(k ...*Key) *MachineUpdate {
	ids := make([]int, len(k))
	for i := range k {
		ids[i] = k[i].ID
	}
	return mu.AddKeyIDs(ids...)
}

// Mutation returns the MachineMutation object of the builder.
func (mu *MachineUpdate) Mutation() *MachineMutation {
	return mu.mutation
}

// ClearIps clears all "ips" edges to the IP entity.
func (mu *MachineUpdate) ClearIps() *MachineUpdate {
	mu.mutation.ClearIps()
	return mu
}

// RemoveIPIDs removes the "ips" edge to IP entities by IDs.
func (mu *MachineUpdate) RemoveIPIDs(ids ...int) *MachineUpdate {
	mu.mutation.RemoveIPIDs(ids...)
	return mu
}

// RemoveIps removes "ips" edges to IP entities.
func (mu *MachineUpdate) RemoveIps(i ...*IP) *MachineUpdate {
	ids := make([]int, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return mu.RemoveIPIDs(ids...)
}

// ClearUsers clears all "users" edges to the User entity.
func (mu *MachineUpdate) ClearUsers() *MachineUpdate {
	mu.mutation.ClearUsers()
	return mu
}

// RemoveUserIDs removes the "users" edge to User entities by IDs.
func (mu *MachineUpdate) RemoveUserIDs(ids ...int) *MachineUpdate {
	mu.mutation.RemoveUserIDs(ids...)
	return mu
}

// RemoveUsers removes "users" edges to User entities.
func (mu *MachineUpdate) RemoveUsers(u ...*User) *MachineUpdate {
	ids := make([]int, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return mu.RemoveUserIDs(ids...)
}

// ClearKeys clears all "keys" edges to the Key entity.
func (mu *MachineUpdate) ClearKeys() *MachineUpdate {
	mu.mutation.ClearKeys()
	return mu
}

// RemoveKeyIDs removes the "keys" edge to Key entities by IDs.
func (mu *MachineUpdate) RemoveKeyIDs(ids ...int) *MachineUpdate {
	mu.mutation.RemoveKeyIDs(ids...)
	return mu
}

// RemoveKeys removes "keys" edges to Key entities.
func (mu *MachineUpdate) RemoveKeys(k ...*Key) *MachineUpdate {
	ids := make([]int, len(k))
	for i := range k {
		ids[i] = k[i].ID
	}
	return mu.RemoveKeyIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (mu *MachineUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(mu.hooks) == 0 {
		if err = mu.check(); err != nil {
			return 0, err
		}
		affected, err = mu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*MachineMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = mu.check(); err != nil {
				return 0, err
			}
			mu.mutation = mutation
			affected, err = mu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(mu.hooks) - 1; i >= 0; i-- {
			mut = mu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, mu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (mu *MachineUpdate) SaveX(ctx context.Context) int {
	affected, err := mu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (mu *MachineUpdate) Exec(ctx context.Context) error {
	_, err := mu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (mu *MachineUpdate) ExecX(ctx context.Context) {
	if err := mu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (mu *MachineUpdate) check() error {
	if v, ok := mu.mutation.Hwid(); ok {
		if err := machine.HwidValidator(v); err != nil {
			return &ValidationError{Name: "hwid", err: fmt.Errorf("ent: validator failed for field \"hwid\": %w", err)}
		}
	}
	if v, ok := mu.mutation.Hostname(); ok {
		if err := machine.HostnameValidator(v); err != nil {
			return &ValidationError{Name: "hostname", err: fmt.Errorf("ent: validator failed for field \"hostname\": %w", err)}
		}
	}
	if v, ok := mu.mutation.Fingerprint(); ok {
		if err := machine.FingerprintValidator(v); err != nil {
			return &ValidationError{Name: "fingerprint", err: fmt.Errorf("ent: validator failed for field \"fingerprint\": %w", err)}
		}
	}
	return nil
}

func (mu *MachineUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   machine.Table,
			Columns: machine.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: machine.FieldID,
			},
		},
	}
	if ps := mu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := mu.mutation.Hwid(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: machine.FieldHwid,
		})
	}
	if value, ok := mu.mutation.Hostname(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: machine.FieldHostname,
		})
	}
	if value, ok := mu.mutation.Fingerprint(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: machine.FieldFingerprint,
		})
	}
	if mu.mutation.IpsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   machine.IpsTable,
			Columns: []string{machine.IpsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: ip.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := mu.mutation.RemovedIpsIDs(); len(nodes) > 0 && !mu.mutation.IpsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   machine.IpsTable,
			Columns: []string{machine.IpsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: ip.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := mu.mutation.IpsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   machine.IpsTable,
			Columns: []string{machine.IpsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: ip.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if mu.mutation.UsersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   machine.UsersTable,
			Columns: machine.UsersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := mu.mutation.RemovedUsersIDs(); len(nodes) > 0 && !mu.mutation.UsersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   machine.UsersTable,
			Columns: machine.UsersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := mu.mutation.UsersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   machine.UsersTable,
			Columns: machine.UsersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if mu.mutation.KeysCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   machine.KeysTable,
			Columns: []string{machine.KeysColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: key.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := mu.mutation.RemovedKeysIDs(); len(nodes) > 0 && !mu.mutation.KeysCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   machine.KeysTable,
			Columns: []string{machine.KeysColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: key.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := mu.mutation.KeysIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   machine.KeysTable,
			Columns: []string{machine.KeysColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: key.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, mu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{machine.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return 0, err
	}
	return n, nil
}

// MachineUpdateOne is the builder for updating a single Machine entity.
type MachineUpdateOne struct {
	config
	hooks    []Hook
	mutation *MachineMutation
}

// SetHwid sets the "hwid" field.
func (muo *MachineUpdateOne) SetHwid(s string) *MachineUpdateOne {
	muo.mutation.SetHwid(s)
	return muo
}

// SetHostname sets the "hostname" field.
func (muo *MachineUpdateOne) SetHostname(s string) *MachineUpdateOne {
	muo.mutation.SetHostname(s)
	return muo
}

// SetFingerprint sets the "fingerprint" field.
func (muo *MachineUpdateOne) SetFingerprint(s string) *MachineUpdateOne {
	muo.mutation.SetFingerprint(s)
	return muo
}

// AddIPIDs adds the "ips" edge to the IP entity by IDs.
func (muo *MachineUpdateOne) AddIPIDs(ids ...int) *MachineUpdateOne {
	muo.mutation.AddIPIDs(ids...)
	return muo
}

// AddIps adds the "ips" edges to the IP entity.
func (muo *MachineUpdateOne) AddIps(i ...*IP) *MachineUpdateOne {
	ids := make([]int, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return muo.AddIPIDs(ids...)
}

// AddUserIDs adds the "users" edge to the User entity by IDs.
func (muo *MachineUpdateOne) AddUserIDs(ids ...int) *MachineUpdateOne {
	muo.mutation.AddUserIDs(ids...)
	return muo
}

// AddUsers adds the "users" edges to the User entity.
func (muo *MachineUpdateOne) AddUsers(u ...*User) *MachineUpdateOne {
	ids := make([]int, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return muo.AddUserIDs(ids...)
}

// AddKeyIDs adds the "keys" edge to the Key entity by IDs.
func (muo *MachineUpdateOne) AddKeyIDs(ids ...int) *MachineUpdateOne {
	muo.mutation.AddKeyIDs(ids...)
	return muo
}

// AddKeys adds the "keys" edges to the Key entity.
func (muo *MachineUpdateOne) AddKeys(k ...*Key) *MachineUpdateOne {
	ids := make([]int, len(k))
	for i := range k {
		ids[i] = k[i].ID
	}
	return muo.AddKeyIDs(ids...)
}

// Mutation returns the MachineMutation object of the builder.
func (muo *MachineUpdateOne) Mutation() *MachineMutation {
	return muo.mutation
}

// ClearIps clears all "ips" edges to the IP entity.
func (muo *MachineUpdateOne) ClearIps() *MachineUpdateOne {
	muo.mutation.ClearIps()
	return muo
}

// RemoveIPIDs removes the "ips" edge to IP entities by IDs.
func (muo *MachineUpdateOne) RemoveIPIDs(ids ...int) *MachineUpdateOne {
	muo.mutation.RemoveIPIDs(ids...)
	return muo
}

// RemoveIps removes "ips" edges to IP entities.
func (muo *MachineUpdateOne) RemoveIps(i ...*IP) *MachineUpdateOne {
	ids := make([]int, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return muo.RemoveIPIDs(ids...)
}

// ClearUsers clears all "users" edges to the User entity.
func (muo *MachineUpdateOne) ClearUsers() *MachineUpdateOne {
	muo.mutation.ClearUsers()
	return muo
}

// RemoveUserIDs removes the "users" edge to User entities by IDs.
func (muo *MachineUpdateOne) RemoveUserIDs(ids ...int) *MachineUpdateOne {
	muo.mutation.RemoveUserIDs(ids...)
	return muo
}

// RemoveUsers removes "users" edges to User entities.
func (muo *MachineUpdateOne) RemoveUsers(u ...*User) *MachineUpdateOne {
	ids := make([]int, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return muo.RemoveUserIDs(ids...)
}

// ClearKeys clears all "keys" edges to the Key entity.
func (muo *MachineUpdateOne) ClearKeys() *MachineUpdateOne {
	muo.mutation.ClearKeys()
	return muo
}

// RemoveKeyIDs removes the "keys" edge to Key entities by IDs.
func (muo *MachineUpdateOne) RemoveKeyIDs(ids ...int) *MachineUpdateOne {
	muo.mutation.RemoveKeyIDs(ids...)
	return muo
}

// RemoveKeys removes "keys" edges to Key entities.
func (muo *MachineUpdateOne) RemoveKeys(k ...*Key) *MachineUpdateOne {
	ids := make([]int, len(k))
	for i := range k {
		ids[i] = k[i].ID
	}
	return muo.RemoveKeyIDs(ids...)
}

// Save executes the query and returns the updated Machine entity.
func (muo *MachineUpdateOne) Save(ctx context.Context) (*Machine, error) {
	var (
		err  error
		node *Machine
	)
	if len(muo.hooks) == 0 {
		if err = muo.check(); err != nil {
			return nil, err
		}
		node, err = muo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*MachineMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = muo.check(); err != nil {
				return nil, err
			}
			muo.mutation = mutation
			node, err = muo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(muo.hooks) - 1; i >= 0; i-- {
			mut = muo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, muo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (muo *MachineUpdateOne) SaveX(ctx context.Context) *Machine {
	node, err := muo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (muo *MachineUpdateOne) Exec(ctx context.Context) error {
	_, err := muo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (muo *MachineUpdateOne) ExecX(ctx context.Context) {
	if err := muo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (muo *MachineUpdateOne) check() error {
	if v, ok := muo.mutation.Hwid(); ok {
		if err := machine.HwidValidator(v); err != nil {
			return &ValidationError{Name: "hwid", err: fmt.Errorf("ent: validator failed for field \"hwid\": %w", err)}
		}
	}
	if v, ok := muo.mutation.Hostname(); ok {
		if err := machine.HostnameValidator(v); err != nil {
			return &ValidationError{Name: "hostname", err: fmt.Errorf("ent: validator failed for field \"hostname\": %w", err)}
		}
	}
	if v, ok := muo.mutation.Fingerprint(); ok {
		if err := machine.FingerprintValidator(v); err != nil {
			return &ValidationError{Name: "fingerprint", err: fmt.Errorf("ent: validator failed for field \"fingerprint\": %w", err)}
		}
	}
	return nil
}

func (muo *MachineUpdateOne) sqlSave(ctx context.Context) (_node *Machine, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   machine.Table,
			Columns: machine.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: machine.FieldID,
			},
		},
	}
	id, ok := muo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing Machine.ID for update")}
	}
	_spec.Node.ID.Value = id
	if ps := muo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := muo.mutation.Hwid(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: machine.FieldHwid,
		})
	}
	if value, ok := muo.mutation.Hostname(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: machine.FieldHostname,
		})
	}
	if value, ok := muo.mutation.Fingerprint(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: machine.FieldFingerprint,
		})
	}
	if muo.mutation.IpsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   machine.IpsTable,
			Columns: []string{machine.IpsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: ip.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := muo.mutation.RemovedIpsIDs(); len(nodes) > 0 && !muo.mutation.IpsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   machine.IpsTable,
			Columns: []string{machine.IpsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: ip.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := muo.mutation.IpsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   machine.IpsTable,
			Columns: []string{machine.IpsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: ip.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if muo.mutation.UsersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   machine.UsersTable,
			Columns: machine.UsersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := muo.mutation.RemovedUsersIDs(); len(nodes) > 0 && !muo.mutation.UsersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   machine.UsersTable,
			Columns: machine.UsersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := muo.mutation.UsersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   machine.UsersTable,
			Columns: machine.UsersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if muo.mutation.KeysCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   machine.KeysTable,
			Columns: []string{machine.KeysColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: key.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := muo.mutation.RemovedKeysIDs(); len(nodes) > 0 && !muo.mutation.KeysCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   machine.KeysTable,
			Columns: []string{machine.KeysColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: key.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := muo.mutation.KeysIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   machine.KeysTable,
			Columns: []string{machine.KeysColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: key.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Machine{config: muo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, muo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{machine.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return _node, nil
}
