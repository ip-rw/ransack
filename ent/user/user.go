// Code generated by entc, DO NOT EDIT.

package user

const (
	// Label holds the string label denoting the user type in the database.
	Label = "user"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldUsername holds the string denoting the username field in the database.
	FieldUsername = "username"
	// FieldPassword holds the string denoting the password field in the database.
	FieldPassword = "password"
	// EdgeMachines holds the string denoting the machines edge name in mutations.
	EdgeMachines = "machines"
	// EdgeKeys holds the string denoting the keys edge name in mutations.
	EdgeKeys = "keys"
	// Table holds the table name of the user in the database.
	Table = "users"
	// MachinesTable is the table the holds the machines relation/edge. The primary key declared below.
	MachinesTable = "user_machines"
	// MachinesInverseTable is the table name for the Machine entity.
	// It exists in this package in order to avoid circular dependency with the "machine" package.
	MachinesInverseTable = "machines"
	// KeysTable is the table the holds the keys relation/edge.
	KeysTable = "keys"
	// KeysInverseTable is the table name for the Key entity.
	// It exists in this package in order to avoid circular dependency with the "key" package.
	KeysInverseTable = "keys"
	// KeysColumn is the table column denoting the keys relation/edge.
	KeysColumn = "key_user"
)

// Columns holds all SQL columns for user fields.
var Columns = []string{
	FieldID,
	FieldUsername,
	FieldPassword,
}

var (
	// MachinesPrimaryKey and MachinesColumn2 are the table columns denoting the
	// primary key for the machines relation (M2M).
	MachinesPrimaryKey = []string{"user_id", "machine_id"}
)

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}
