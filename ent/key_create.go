// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/ip-rw/ransack/ent/key"
	"github.com/ip-rw/ransack/ent/machine"
	"github.com/ip-rw/ransack/ent/user"
)

// KeyCreate is the builder for creating a Key entity.
type KeyCreate struct {
	config
	mutation *KeyMutation
	hooks    []Hook
}

// SetKeyfile sets the "keyfile" field.
func (kc *KeyCreate) SetKeyfile(b []byte) *KeyCreate {
	kc.mutation.SetKeyfile(b)
	return kc
}

// SetPassword sets the "password" field.
func (kc *KeyCreate) SetPassword(s string) *KeyCreate {
	kc.mutation.SetPassword(s)
	return kc
}

// SetNillablePassword sets the "password" field if the given value is not nil.
func (kc *KeyCreate) SetNillablePassword(s *string) *KeyCreate {
	if s != nil {
		kc.SetPassword(*s)
	}
	return kc
}

// SetMachineID sets the "machine" edge to the Machine entity by ID.
func (kc *KeyCreate) SetMachineID(id int) *KeyCreate {
	kc.mutation.SetMachineID(id)
	return kc
}

// SetNillableMachineID sets the "machine" edge to the Machine entity by ID if the given value is not nil.
func (kc *KeyCreate) SetNillableMachineID(id *int) *KeyCreate {
	if id != nil {
		kc = kc.SetMachineID(*id)
	}
	return kc
}

// SetMachine sets the "machine" edge to the Machine entity.
func (kc *KeyCreate) SetMachine(m *Machine) *KeyCreate {
	return kc.SetMachineID(m.ID)
}

// SetUserID sets the "user" edge to the User entity by ID.
func (kc *KeyCreate) SetUserID(id int) *KeyCreate {
	kc.mutation.SetUserID(id)
	return kc
}

// SetNillableUserID sets the "user" edge to the User entity by ID if the given value is not nil.
func (kc *KeyCreate) SetNillableUserID(id *int) *KeyCreate {
	if id != nil {
		kc = kc.SetUserID(*id)
	}
	return kc
}

// SetUser sets the "user" edge to the User entity.
func (kc *KeyCreate) SetUser(u *User) *KeyCreate {
	return kc.SetUserID(u.ID)
}

// Mutation returns the KeyMutation object of the builder.
func (kc *KeyCreate) Mutation() *KeyMutation {
	return kc.mutation
}

// Save creates the Key in the database.
func (kc *KeyCreate) Save(ctx context.Context) (*Key, error) {
	var (
		err  error
		node *Key
	)
	if len(kc.hooks) == 0 {
		if err = kc.check(); err != nil {
			return nil, err
		}
		node, err = kc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*KeyMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = kc.check(); err != nil {
				return nil, err
			}
			kc.mutation = mutation
			node, err = kc.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(kc.hooks) - 1; i >= 0; i-- {
			mut = kc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, kc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (kc *KeyCreate) SaveX(ctx context.Context) *Key {
	v, err := kc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// check runs all checks and user-defined validators on the builder.
func (kc *KeyCreate) check() error {
	if _, ok := kc.mutation.Keyfile(); !ok {
		return &ValidationError{Name: "keyfile", err: errors.New("ent: missing required field \"keyfile\"")}
	}
	return nil
}

func (kc *KeyCreate) sqlSave(ctx context.Context) (*Key, error) {
	_node, _spec := kc.createSpec()
	if err := sqlgraph.CreateNode(ctx, kc.driver, _spec); err != nil {
		if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	return _node, nil
}

func (kc *KeyCreate) createSpec() (*Key, *sqlgraph.CreateSpec) {
	var (
		_node = &Key{config: kc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: key.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: key.FieldID,
			},
		}
	)
	if value, ok := kc.mutation.Keyfile(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeBytes,
			Value:  value,
			Column: key.FieldKeyfile,
		})
		_node.Keyfile = value
	}
	if value, ok := kc.mutation.Password(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: key.FieldPassword,
		})
		_node.Password = value
	}
	if nodes := kc.mutation.MachineIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   key.MachineTable,
			Columns: []string{key.MachineColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: machine.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.key_machine = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := kc.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   key.UserTable,
			Columns: []string{key.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.key_user = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// KeyCreateBulk is the builder for creating many Key entities in bulk.
type KeyCreateBulk struct {
	config
	builders []*KeyCreate
}

// Save creates the Key entities in the database.
func (kcb *KeyCreateBulk) Save(ctx context.Context) ([]*Key, error) {
	specs := make([]*sqlgraph.CreateSpec, len(kcb.builders))
	nodes := make([]*Key, len(kcb.builders))
	mutators := make([]Mutator, len(kcb.builders))
	for i := range kcb.builders {
		func(i int, root context.Context) {
			builder := kcb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*KeyMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, kcb.builders[i+1].mutation)
				} else {
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, kcb.driver, &sqlgraph.BatchCreateSpec{Nodes: specs}); err != nil {
						if cerr, ok := isSQLConstraintError(err); ok {
							err = cerr
						}
					}
				}
				mutation.done = true
				if err != nil {
					return nil, err
				}
				id := specs[i].ID.Value.(int64)
				nodes[i].ID = int(id)
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, kcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (kcb *KeyCreateBulk) SaveX(ctx context.Context) []*Key {
	v, err := kcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}
