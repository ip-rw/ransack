// Code generated by entc, DO NOT EDIT.

package key

const (
	// Label holds the string label denoting the key type in the database.
	Label = "key"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldKeyfile holds the string denoting the keyfile field in the database.
	FieldKeyfile = "keyfile"
	// FieldPassword holds the string denoting the password field in the database.
	FieldPassword = "password"
	// EdgeMachine holds the string denoting the machine edge name in mutations.
	EdgeMachine = "machine"
	// EdgeUser holds the string denoting the user edge name in mutations.
	EdgeUser = "user"
	// Table holds the table name of the key in the database.
	Table = "keys"
	// MachineTable is the table the holds the machine relation/edge.
	MachineTable = "keys"
	// MachineInverseTable is the table name for the Machine entity.
	// It exists in this package in order to avoid circular dependency with the "machine" package.
	MachineInverseTable = "machines"
	// MachineColumn is the table column denoting the machine relation/edge.
	MachineColumn = "key_machine"
	// UserTable is the table the holds the user relation/edge.
	UserTable = "keys"
	// UserInverseTable is the table name for the User entity.
	// It exists in this package in order to avoid circular dependency with the "user" package.
	UserInverseTable = "users"
	// UserColumn is the table column denoting the user relation/edge.
	UserColumn = "key_user"
)

// Columns holds all SQL columns for key fields.
var Columns = []string{
	FieldID,
	FieldKeyfile,
	FieldPassword,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "keys"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"key_machine",
	"key_user",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}
