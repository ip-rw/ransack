// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent/dialect/sql"
	"github.com/ip-rw/ransack/ent/ip"
	"github.com/ip-rw/ransack/ent/machine"
)

// IP is the model entity for the IP schema.
type IP struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// IP holds the value of the "ip" field.
	IP string `json:"ip,omitempty"`
	// Net holds the value of the "net" field.
	Net string `json:"net,omitempty"`
	// Mask holds the value of the "mask" field.
	Mask int `json:"mask,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the IPQuery when eager-loading is set.
	Edges      IPEdges `json:"edges"`
	ip_machine *int
}

// IPEdges holds the relations/edges for other nodes in the graph.
type IPEdges struct {
	// Machine holds the value of the machine edge.
	Machine *Machine `json:"machine,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// MachineOrErr returns the Machine value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e IPEdges) MachineOrErr() (*Machine, error) {
	if e.loadedTypes[0] {
		if e.Machine == nil {
			// The edge machine was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: machine.Label}
		}
		return e.Machine, nil
	}
	return nil, &NotLoadedError{edge: "machine"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*IP) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case ip.FieldID, ip.FieldMask:
			values[i] = &sql.NullInt64{}
		case ip.FieldIP, ip.FieldNet:
			values[i] = &sql.NullString{}
		case ip.ForeignKeys[0]: // ip_machine
			values[i] = &sql.NullInt64{}
		default:
			return nil, fmt.Errorf("unexpected column %q for type IP", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the IP fields.
func (i *IP) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for j := range columns {
		switch columns[j] {
		case ip.FieldID:
			value, ok := values[j].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			i.ID = int(value.Int64)
		case ip.FieldIP:
			if value, ok := values[j].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field ip", values[j])
			} else if value.Valid {
				i.IP = value.String
			}
		case ip.FieldNet:
			if value, ok := values[j].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field net", values[j])
			} else if value.Valid {
				i.Net = value.String
			}
		case ip.FieldMask:
			if value, ok := values[j].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field mask", values[j])
			} else if value.Valid {
				i.Mask = int(value.Int64)
			}
		case ip.ForeignKeys[0]:
			if value, ok := values[j].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field ip_machine", value)
			} else if value.Valid {
				i.ip_machine = new(int)
				*i.ip_machine = int(value.Int64)
			}
		}
	}
	return nil
}

// QueryMachine queries the "machine" edge of the IP entity.
func (i *IP) QueryMachine() *MachineQuery {
	return (&IPClient{config: i.config}).QueryMachine(i)
}

// Update returns a builder for updating this IP.
// Note that you need to call IP.Unwrap() before calling this method if this IP
// was returned from a transaction, and the transaction was committed or rolled back.
func (i *IP) Update() *IPUpdateOne {
	return (&IPClient{config: i.config}).UpdateOne(i)
}

// Unwrap unwraps the IP entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (i *IP) Unwrap() *IP {
	tx, ok := i.config.driver.(*txDriver)
	if !ok {
		panic("ent: IP is not a transactional entity")
	}
	i.config.driver = tx.drv
	return i
}

// String implements the fmt.Stringer.
func (i *IP) String() string {
	var builder strings.Builder
	builder.WriteString("IP(")
	builder.WriteString(fmt.Sprintf("id=%v", i.ID))
	builder.WriteString(", ip=")
	builder.WriteString(i.IP)
	builder.WriteString(", net=")
	builder.WriteString(i.Net)
	builder.WriteString(", mask=")
	builder.WriteString(fmt.Sprintf("%v", i.Mask))
	builder.WriteByte(')')
	return builder.String()
}

// IPs is a parsable slice of IP.
type IPs []*IP

func (i IPs) config(cfg config) {
	for _i := range i {
		i[_i].config = cfg
	}
}
