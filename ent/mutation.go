// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"sync"

	"github.com/ip-rw/ransack/ent/ip"
	"github.com/ip-rw/ransack/ent/key"
	"github.com/ip-rw/ransack/ent/machine"
	"github.com/ip-rw/ransack/ent/predicate"
	"github.com/ip-rw/ransack/ent/user"

	"entgo.io/ent"
)

const (
	// Operation types.
	OpCreate    = ent.OpCreate
	OpDelete    = ent.OpDelete
	OpDeleteOne = ent.OpDeleteOne
	OpUpdate    = ent.OpUpdate
	OpUpdateOne = ent.OpUpdateOne

	// Node types.
	TypeIP      = "IP"
	TypeKey     = "Key"
	TypeMachine = "Machine"
	TypeUser    = "User"
)

// IPMutation represents an operation that mutates the IP nodes in the graph.
type IPMutation struct {
	config
	op             Op
	typ            string
	id             *int
	ip             *string
	net            *string
	mask           *int
	addmask        *int
	clearedFields  map[string]struct{}
	machine        *int
	clearedmachine bool
	done           bool
	oldValue       func(context.Context) (*IP, error)
	predicates     []predicate.IP
}

var _ ent.Mutation = (*IPMutation)(nil)

// ipOption allows management of the mutation configuration using functional options.
type ipOption func(*IPMutation)

// newIPMutation creates new mutation for the IP entity.
func newIPMutation(c config, op Op, opts ...ipOption) *IPMutation {
	m := &IPMutation{
		config:        c,
		op:            op,
		typ:           TypeIP,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withIPID sets the ID field of the mutation.
func withIPID(id int) ipOption {
	return func(m *IPMutation) {
		var (
			err   error
			once  sync.Once
			value *IP
		)
		m.oldValue = func(ctx context.Context) (*IP, error) {
			once.Do(func() {
				if m.done {
					err = fmt.Errorf("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().IP.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withIP sets the old IP of the mutation.
func withIP(node *IP) ipOption {
	return func(m *IPMutation) {
		m.oldValue = func(context.Context) (*IP, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m IPMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m IPMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, fmt.Errorf("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID
// is only available if it was provided to the builder.
func (m *IPMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// SetIP sets the "ip" field.
func (m *IPMutation) SetIP(s string) {
	m.ip = &s
}

// IP returns the value of the "ip" field in the mutation.
func (m *IPMutation) IP() (r string, exists bool) {
	v := m.ip
	if v == nil {
		return
	}
	return *v, true
}

// OldIP returns the old "ip" field's value of the IP entity.
// If the IP object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *IPMutation) OldIP(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldIP is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldIP requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldIP: %w", err)
	}
	return oldValue.IP, nil
}

// ResetIP resets all changes to the "ip" field.
func (m *IPMutation) ResetIP() {
	m.ip = nil
}

// SetNet sets the "net" field.
func (m *IPMutation) SetNet(s string) {
	m.net = &s
}

// Net returns the value of the "net" field in the mutation.
func (m *IPMutation) Net() (r string, exists bool) {
	v := m.net
	if v == nil {
		return
	}
	return *v, true
}

// OldNet returns the old "net" field's value of the IP entity.
// If the IP object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *IPMutation) OldNet(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldNet is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldNet requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldNet: %w", err)
	}
	return oldValue.Net, nil
}

// ResetNet resets all changes to the "net" field.
func (m *IPMutation) ResetNet() {
	m.net = nil
}

// SetMask sets the "mask" field.
func (m *IPMutation) SetMask(i int) {
	m.mask = &i
	m.addmask = nil
}

// Mask returns the value of the "mask" field in the mutation.
func (m *IPMutation) Mask() (r int, exists bool) {
	v := m.mask
	if v == nil {
		return
	}
	return *v, true
}

// OldMask returns the old "mask" field's value of the IP entity.
// If the IP object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *IPMutation) OldMask(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldMask is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldMask requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldMask: %w", err)
	}
	return oldValue.Mask, nil
}

// AddMask adds i to the "mask" field.
func (m *IPMutation) AddMask(i int) {
	if m.addmask != nil {
		*m.addmask += i
	} else {
		m.addmask = &i
	}
}

// AddedMask returns the value that was added to the "mask" field in this mutation.
func (m *IPMutation) AddedMask() (r int, exists bool) {
	v := m.addmask
	if v == nil {
		return
	}
	return *v, true
}

// ResetMask resets all changes to the "mask" field.
func (m *IPMutation) ResetMask() {
	m.mask = nil
	m.addmask = nil
}

// SetMachineID sets the "machine" edge to the Machine entity by id.
func (m *IPMutation) SetMachineID(id int) {
	m.machine = &id
}

// ClearMachine clears the "machine" edge to the Machine entity.
func (m *IPMutation) ClearMachine() {
	m.clearedmachine = true
}

// MachineCleared returns if the "machine" edge to the Machine entity was cleared.
func (m *IPMutation) MachineCleared() bool {
	return m.clearedmachine
}

// MachineID returns the "machine" edge ID in the mutation.
func (m *IPMutation) MachineID() (id int, exists bool) {
	if m.machine != nil {
		return *m.machine, true
	}
	return
}

// MachineIDs returns the "machine" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// MachineID instead. It exists only for internal usage by the builders.
func (m *IPMutation) MachineIDs() (ids []int) {
	if id := m.machine; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetMachine resets all changes to the "machine" edge.
func (m *IPMutation) ResetMachine() {
	m.machine = nil
	m.clearedmachine = false
}

// Op returns the operation name.
func (m *IPMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (IP).
func (m *IPMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *IPMutation) Fields() []string {
	fields := make([]string, 0, 3)
	if m.ip != nil {
		fields = append(fields, ip.FieldIP)
	}
	if m.net != nil {
		fields = append(fields, ip.FieldNet)
	}
	if m.mask != nil {
		fields = append(fields, ip.FieldMask)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *IPMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case ip.FieldIP:
		return m.IP()
	case ip.FieldNet:
		return m.Net()
	case ip.FieldMask:
		return m.Mask()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *IPMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case ip.FieldIP:
		return m.OldIP(ctx)
	case ip.FieldNet:
		return m.OldNet(ctx)
	case ip.FieldMask:
		return m.OldMask(ctx)
	}
	return nil, fmt.Errorf("unknown IP field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *IPMutation) SetField(name string, value ent.Value) error {
	switch name {
	case ip.FieldIP:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetIP(v)
		return nil
	case ip.FieldNet:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetNet(v)
		return nil
	case ip.FieldMask:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetMask(v)
		return nil
	}
	return fmt.Errorf("unknown IP field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *IPMutation) AddedFields() []string {
	var fields []string
	if m.addmask != nil {
		fields = append(fields, ip.FieldMask)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *IPMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case ip.FieldMask:
		return m.AddedMask()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *IPMutation) AddField(name string, value ent.Value) error {
	switch name {
	case ip.FieldMask:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddMask(v)
		return nil
	}
	return fmt.Errorf("unknown IP numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *IPMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *IPMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *IPMutation) ClearField(name string) error {
	return fmt.Errorf("unknown IP nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *IPMutation) ResetField(name string) error {
	switch name {
	case ip.FieldIP:
		m.ResetIP()
		return nil
	case ip.FieldNet:
		m.ResetNet()
		return nil
	case ip.FieldMask:
		m.ResetMask()
		return nil
	}
	return fmt.Errorf("unknown IP field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *IPMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.machine != nil {
		edges = append(edges, ip.EdgeMachine)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *IPMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case ip.EdgeMachine:
		if id := m.machine; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *IPMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *IPMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *IPMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.clearedmachine {
		edges = append(edges, ip.EdgeMachine)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *IPMutation) EdgeCleared(name string) bool {
	switch name {
	case ip.EdgeMachine:
		return m.clearedmachine
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *IPMutation) ClearEdge(name string) error {
	switch name {
	case ip.EdgeMachine:
		m.ClearMachine()
		return nil
	}
	return fmt.Errorf("unknown IP unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *IPMutation) ResetEdge(name string) error {
	switch name {
	case ip.EdgeMachine:
		m.ResetMachine()
		return nil
	}
	return fmt.Errorf("unknown IP edge %s", name)
}

// KeyMutation represents an operation that mutates the Key nodes in the graph.
type KeyMutation struct {
	config
	op             Op
	typ            string
	id             *int
	keyfile        *[]byte
	password       *string
	clearedFields  map[string]struct{}
	machine        *int
	clearedmachine bool
	user           *int
	cleareduser    bool
	done           bool
	oldValue       func(context.Context) (*Key, error)
	predicates     []predicate.Key
}

var _ ent.Mutation = (*KeyMutation)(nil)

// keyOption allows management of the mutation configuration using functional options.
type keyOption func(*KeyMutation)

// newKeyMutation creates new mutation for the Key entity.
func newKeyMutation(c config, op Op, opts ...keyOption) *KeyMutation {
	m := &KeyMutation{
		config:        c,
		op:            op,
		typ:           TypeKey,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withKeyID sets the ID field of the mutation.
func withKeyID(id int) keyOption {
	return func(m *KeyMutation) {
		var (
			err   error
			once  sync.Once
			value *Key
		)
		m.oldValue = func(ctx context.Context) (*Key, error) {
			once.Do(func() {
				if m.done {
					err = fmt.Errorf("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Key.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withKey sets the old Key of the mutation.
func withKey(node *Key) keyOption {
	return func(m *KeyMutation) {
		m.oldValue = func(context.Context) (*Key, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m KeyMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m KeyMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, fmt.Errorf("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID
// is only available if it was provided to the builder.
func (m *KeyMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// SetKeyfile sets the "keyfile" field.
func (m *KeyMutation) SetKeyfile(b []byte) {
	m.keyfile = &b
}

// Keyfile returns the value of the "keyfile" field in the mutation.
func (m *KeyMutation) Keyfile() (r []byte, exists bool) {
	v := m.keyfile
	if v == nil {
		return
	}
	return *v, true
}

// OldKeyfile returns the old "keyfile" field's value of the Key entity.
// If the Key object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *KeyMutation) OldKeyfile(ctx context.Context) (v []byte, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldKeyfile is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldKeyfile requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldKeyfile: %w", err)
	}
	return oldValue.Keyfile, nil
}

// ResetKeyfile resets all changes to the "keyfile" field.
func (m *KeyMutation) ResetKeyfile() {
	m.keyfile = nil
}

// SetPassword sets the "password" field.
func (m *KeyMutation) SetPassword(s string) {
	m.password = &s
}

// Password returns the value of the "password" field in the mutation.
func (m *KeyMutation) Password() (r string, exists bool) {
	v := m.password
	if v == nil {
		return
	}
	return *v, true
}

// OldPassword returns the old "password" field's value of the Key entity.
// If the Key object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *KeyMutation) OldPassword(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldPassword is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldPassword requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPassword: %w", err)
	}
	return oldValue.Password, nil
}

// ClearPassword clears the value of the "password" field.
func (m *KeyMutation) ClearPassword() {
	m.password = nil
	m.clearedFields[key.FieldPassword] = struct{}{}
}

// PasswordCleared returns if the "password" field was cleared in this mutation.
func (m *KeyMutation) PasswordCleared() bool {
	_, ok := m.clearedFields[key.FieldPassword]
	return ok
}

// ResetPassword resets all changes to the "password" field.
func (m *KeyMutation) ResetPassword() {
	m.password = nil
	delete(m.clearedFields, key.FieldPassword)
}

// SetMachineID sets the "machine" edge to the Machine entity by id.
func (m *KeyMutation) SetMachineID(id int) {
	m.machine = &id
}

// ClearMachine clears the "machine" edge to the Machine entity.
func (m *KeyMutation) ClearMachine() {
	m.clearedmachine = true
}

// MachineCleared returns if the "machine" edge to the Machine entity was cleared.
func (m *KeyMutation) MachineCleared() bool {
	return m.clearedmachine
}

// MachineID returns the "machine" edge ID in the mutation.
func (m *KeyMutation) MachineID() (id int, exists bool) {
	if m.machine != nil {
		return *m.machine, true
	}
	return
}

// MachineIDs returns the "machine" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// MachineID instead. It exists only for internal usage by the builders.
func (m *KeyMutation) MachineIDs() (ids []int) {
	if id := m.machine; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetMachine resets all changes to the "machine" edge.
func (m *KeyMutation) ResetMachine() {
	m.machine = nil
	m.clearedmachine = false
}

// SetUserID sets the "user" edge to the User entity by id.
func (m *KeyMutation) SetUserID(id int) {
	m.user = &id
}

// ClearUser clears the "user" edge to the User entity.
func (m *KeyMutation) ClearUser() {
	m.cleareduser = true
}

// UserCleared returns if the "user" edge to the User entity was cleared.
func (m *KeyMutation) UserCleared() bool {
	return m.cleareduser
}

// UserID returns the "user" edge ID in the mutation.
func (m *KeyMutation) UserID() (id int, exists bool) {
	if m.user != nil {
		return *m.user, true
	}
	return
}

// UserIDs returns the "user" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// UserID instead. It exists only for internal usage by the builders.
func (m *KeyMutation) UserIDs() (ids []int) {
	if id := m.user; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetUser resets all changes to the "user" edge.
func (m *KeyMutation) ResetUser() {
	m.user = nil
	m.cleareduser = false
}

// Op returns the operation name.
func (m *KeyMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (Key).
func (m *KeyMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *KeyMutation) Fields() []string {
	fields := make([]string, 0, 2)
	if m.keyfile != nil {
		fields = append(fields, key.FieldKeyfile)
	}
	if m.password != nil {
		fields = append(fields, key.FieldPassword)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *KeyMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case key.FieldKeyfile:
		return m.Keyfile()
	case key.FieldPassword:
		return m.Password()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *KeyMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case key.FieldKeyfile:
		return m.OldKeyfile(ctx)
	case key.FieldPassword:
		return m.OldPassword(ctx)
	}
	return nil, fmt.Errorf("unknown Key field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *KeyMutation) SetField(name string, value ent.Value) error {
	switch name {
	case key.FieldKeyfile:
		v, ok := value.([]byte)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetKeyfile(v)
		return nil
	case key.FieldPassword:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPassword(v)
		return nil
	}
	return fmt.Errorf("unknown Key field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *KeyMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *KeyMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *KeyMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Key numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *KeyMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(key.FieldPassword) {
		fields = append(fields, key.FieldPassword)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *KeyMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *KeyMutation) ClearField(name string) error {
	switch name {
	case key.FieldPassword:
		m.ClearPassword()
		return nil
	}
	return fmt.Errorf("unknown Key nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *KeyMutation) ResetField(name string) error {
	switch name {
	case key.FieldKeyfile:
		m.ResetKeyfile()
		return nil
	case key.FieldPassword:
		m.ResetPassword()
		return nil
	}
	return fmt.Errorf("unknown Key field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *KeyMutation) AddedEdges() []string {
	edges := make([]string, 0, 2)
	if m.machine != nil {
		edges = append(edges, key.EdgeMachine)
	}
	if m.user != nil {
		edges = append(edges, key.EdgeUser)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *KeyMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case key.EdgeMachine:
		if id := m.machine; id != nil {
			return []ent.Value{*id}
		}
	case key.EdgeUser:
		if id := m.user; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *KeyMutation) RemovedEdges() []string {
	edges := make([]string, 0, 2)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *KeyMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *KeyMutation) ClearedEdges() []string {
	edges := make([]string, 0, 2)
	if m.clearedmachine {
		edges = append(edges, key.EdgeMachine)
	}
	if m.cleareduser {
		edges = append(edges, key.EdgeUser)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *KeyMutation) EdgeCleared(name string) bool {
	switch name {
	case key.EdgeMachine:
		return m.clearedmachine
	case key.EdgeUser:
		return m.cleareduser
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *KeyMutation) ClearEdge(name string) error {
	switch name {
	case key.EdgeMachine:
		m.ClearMachine()
		return nil
	case key.EdgeUser:
		m.ClearUser()
		return nil
	}
	return fmt.Errorf("unknown Key unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *KeyMutation) ResetEdge(name string) error {
	switch name {
	case key.EdgeMachine:
		m.ResetMachine()
		return nil
	case key.EdgeUser:
		m.ResetUser()
		return nil
	}
	return fmt.Errorf("unknown Key edge %s", name)
}

// MachineMutation represents an operation that mutates the Machine nodes in the graph.
type MachineMutation struct {
	config
	op            Op
	typ           string
	id            *int
	hwid          *string
	hostname      *string
	fingerprint   *string
	clearedFields map[string]struct{}
	ips           map[int]struct{}
	removedips    map[int]struct{}
	clearedips    bool
	users         map[int]struct{}
	removedusers  map[int]struct{}
	clearedusers  bool
	keys          map[int]struct{}
	removedkeys   map[int]struct{}
	clearedkeys   bool
	done          bool
	oldValue      func(context.Context) (*Machine, error)
	predicates    []predicate.Machine
}

var _ ent.Mutation = (*MachineMutation)(nil)

// machineOption allows management of the mutation configuration using functional options.
type machineOption func(*MachineMutation)

// newMachineMutation creates new mutation for the Machine entity.
func newMachineMutation(c config, op Op, opts ...machineOption) *MachineMutation {
	m := &MachineMutation{
		config:        c,
		op:            op,
		typ:           TypeMachine,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withMachineID sets the ID field of the mutation.
func withMachineID(id int) machineOption {
	return func(m *MachineMutation) {
		var (
			err   error
			once  sync.Once
			value *Machine
		)
		m.oldValue = func(ctx context.Context) (*Machine, error) {
			once.Do(func() {
				if m.done {
					err = fmt.Errorf("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Machine.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withMachine sets the old Machine of the mutation.
func withMachine(node *Machine) machineOption {
	return func(m *MachineMutation) {
		m.oldValue = func(context.Context) (*Machine, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m MachineMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m MachineMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, fmt.Errorf("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID
// is only available if it was provided to the builder.
func (m *MachineMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// SetHwid sets the "hwid" field.
func (m *MachineMutation) SetHwid(s string) {
	m.hwid = &s
}

// Hwid returns the value of the "hwid" field in the mutation.
func (m *MachineMutation) Hwid() (r string, exists bool) {
	v := m.hwid
	if v == nil {
		return
	}
	return *v, true
}

// OldHwid returns the old "hwid" field's value of the Machine entity.
// If the Machine object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *MachineMutation) OldHwid(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldHwid is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldHwid requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldHwid: %w", err)
	}
	return oldValue.Hwid, nil
}

// ResetHwid resets all changes to the "hwid" field.
func (m *MachineMutation) ResetHwid() {
	m.hwid = nil
}

// SetHostname sets the "hostname" field.
func (m *MachineMutation) SetHostname(s string) {
	m.hostname = &s
}

// Hostname returns the value of the "hostname" field in the mutation.
func (m *MachineMutation) Hostname() (r string, exists bool) {
	v := m.hostname
	if v == nil {
		return
	}
	return *v, true
}

// OldHostname returns the old "hostname" field's value of the Machine entity.
// If the Machine object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *MachineMutation) OldHostname(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldHostname is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldHostname requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldHostname: %w", err)
	}
	return oldValue.Hostname, nil
}

// ResetHostname resets all changes to the "hostname" field.
func (m *MachineMutation) ResetHostname() {
	m.hostname = nil
}

// SetFingerprint sets the "fingerprint" field.
func (m *MachineMutation) SetFingerprint(s string) {
	m.fingerprint = &s
}

// Fingerprint returns the value of the "fingerprint" field in the mutation.
func (m *MachineMutation) Fingerprint() (r string, exists bool) {
	v := m.fingerprint
	if v == nil {
		return
	}
	return *v, true
}

// OldFingerprint returns the old "fingerprint" field's value of the Machine entity.
// If the Machine object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *MachineMutation) OldFingerprint(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldFingerprint is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldFingerprint requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldFingerprint: %w", err)
	}
	return oldValue.Fingerprint, nil
}

// ResetFingerprint resets all changes to the "fingerprint" field.
func (m *MachineMutation) ResetFingerprint() {
	m.fingerprint = nil
}

// AddIPIDs adds the "ips" edge to the IP entity by ids.
func (m *MachineMutation) AddIPIDs(ids ...int) {
	if m.ips == nil {
		m.ips = make(map[int]struct{})
	}
	for i := range ids {
		m.ips[ids[i]] = struct{}{}
	}
}

// ClearIps clears the "ips" edge to the IP entity.
func (m *MachineMutation) ClearIps() {
	m.clearedips = true
}

// IpsCleared returns if the "ips" edge to the IP entity was cleared.
func (m *MachineMutation) IpsCleared() bool {
	return m.clearedips
}

// RemoveIPIDs removes the "ips" edge to the IP entity by IDs.
func (m *MachineMutation) RemoveIPIDs(ids ...int) {
	if m.removedips == nil {
		m.removedips = make(map[int]struct{})
	}
	for i := range ids {
		m.removedips[ids[i]] = struct{}{}
	}
}

// RemovedIps returns the removed IDs of the "ips" edge to the IP entity.
func (m *MachineMutation) RemovedIpsIDs() (ids []int) {
	for id := range m.removedips {
		ids = append(ids, id)
	}
	return
}

// IpsIDs returns the "ips" edge IDs in the mutation.
func (m *MachineMutation) IpsIDs() (ids []int) {
	for id := range m.ips {
		ids = append(ids, id)
	}
	return
}

// ResetIps resets all changes to the "ips" edge.
func (m *MachineMutation) ResetIps() {
	m.ips = nil
	m.clearedips = false
	m.removedips = nil
}

// AddUserIDs adds the "users" edge to the User entity by ids.
func (m *MachineMutation) AddUserIDs(ids ...int) {
	if m.users == nil {
		m.users = make(map[int]struct{})
	}
	for i := range ids {
		m.users[ids[i]] = struct{}{}
	}
}

// ClearUsers clears the "users" edge to the User entity.
func (m *MachineMutation) ClearUsers() {
	m.clearedusers = true
}

// UsersCleared returns if the "users" edge to the User entity was cleared.
func (m *MachineMutation) UsersCleared() bool {
	return m.clearedusers
}

// RemoveUserIDs removes the "users" edge to the User entity by IDs.
func (m *MachineMutation) RemoveUserIDs(ids ...int) {
	if m.removedusers == nil {
		m.removedusers = make(map[int]struct{})
	}
	for i := range ids {
		m.removedusers[ids[i]] = struct{}{}
	}
}

// RemovedUsers returns the removed IDs of the "users" edge to the User entity.
func (m *MachineMutation) RemovedUsersIDs() (ids []int) {
	for id := range m.removedusers {
		ids = append(ids, id)
	}
	return
}

// UsersIDs returns the "users" edge IDs in the mutation.
func (m *MachineMutation) UsersIDs() (ids []int) {
	for id := range m.users {
		ids = append(ids, id)
	}
	return
}

// ResetUsers resets all changes to the "users" edge.
func (m *MachineMutation) ResetUsers() {
	m.users = nil
	m.clearedusers = false
	m.removedusers = nil
}

// AddKeyIDs adds the "keys" edge to the Key entity by ids.
func (m *MachineMutation) AddKeyIDs(ids ...int) {
	if m.keys == nil {
		m.keys = make(map[int]struct{})
	}
	for i := range ids {
		m.keys[ids[i]] = struct{}{}
	}
}

// ClearKeys clears the "keys" edge to the Key entity.
func (m *MachineMutation) ClearKeys() {
	m.clearedkeys = true
}

// KeysCleared returns if the "keys" edge to the Key entity was cleared.
func (m *MachineMutation) KeysCleared() bool {
	return m.clearedkeys
}

// RemoveKeyIDs removes the "keys" edge to the Key entity by IDs.
func (m *MachineMutation) RemoveKeyIDs(ids ...int) {
	if m.removedkeys == nil {
		m.removedkeys = make(map[int]struct{})
	}
	for i := range ids {
		m.removedkeys[ids[i]] = struct{}{}
	}
}

// RemovedKeys returns the removed IDs of the "keys" edge to the Key entity.
func (m *MachineMutation) RemovedKeysIDs() (ids []int) {
	for id := range m.removedkeys {
		ids = append(ids, id)
	}
	return
}

// KeysIDs returns the "keys" edge IDs in the mutation.
func (m *MachineMutation) KeysIDs() (ids []int) {
	for id := range m.keys {
		ids = append(ids, id)
	}
	return
}

// ResetKeys resets all changes to the "keys" edge.
func (m *MachineMutation) ResetKeys() {
	m.keys = nil
	m.clearedkeys = false
	m.removedkeys = nil
}

// Op returns the operation name.
func (m *MachineMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (Machine).
func (m *MachineMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *MachineMutation) Fields() []string {
	fields := make([]string, 0, 3)
	if m.hwid != nil {
		fields = append(fields, machine.FieldHwid)
	}
	if m.hostname != nil {
		fields = append(fields, machine.FieldHostname)
	}
	if m.fingerprint != nil {
		fields = append(fields, machine.FieldFingerprint)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *MachineMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case machine.FieldHwid:
		return m.Hwid()
	case machine.FieldHostname:
		return m.Hostname()
	case machine.FieldFingerprint:
		return m.Fingerprint()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *MachineMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case machine.FieldHwid:
		return m.OldHwid(ctx)
	case machine.FieldHostname:
		return m.OldHostname(ctx)
	case machine.FieldFingerprint:
		return m.OldFingerprint(ctx)
	}
	return nil, fmt.Errorf("unknown Machine field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *MachineMutation) SetField(name string, value ent.Value) error {
	switch name {
	case machine.FieldHwid:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetHwid(v)
		return nil
	case machine.FieldHostname:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetHostname(v)
		return nil
	case machine.FieldFingerprint:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetFingerprint(v)
		return nil
	}
	return fmt.Errorf("unknown Machine field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *MachineMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *MachineMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *MachineMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Machine numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *MachineMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *MachineMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *MachineMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Machine nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *MachineMutation) ResetField(name string) error {
	switch name {
	case machine.FieldHwid:
		m.ResetHwid()
		return nil
	case machine.FieldHostname:
		m.ResetHostname()
		return nil
	case machine.FieldFingerprint:
		m.ResetFingerprint()
		return nil
	}
	return fmt.Errorf("unknown Machine field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *MachineMutation) AddedEdges() []string {
	edges := make([]string, 0, 3)
	if m.ips != nil {
		edges = append(edges, machine.EdgeIps)
	}
	if m.users != nil {
		edges = append(edges, machine.EdgeUsers)
	}
	if m.keys != nil {
		edges = append(edges, machine.EdgeKeys)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *MachineMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case machine.EdgeIps:
		ids := make([]ent.Value, 0, len(m.ips))
		for id := range m.ips {
			ids = append(ids, id)
		}
		return ids
	case machine.EdgeUsers:
		ids := make([]ent.Value, 0, len(m.users))
		for id := range m.users {
			ids = append(ids, id)
		}
		return ids
	case machine.EdgeKeys:
		ids := make([]ent.Value, 0, len(m.keys))
		for id := range m.keys {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *MachineMutation) RemovedEdges() []string {
	edges := make([]string, 0, 3)
	if m.removedips != nil {
		edges = append(edges, machine.EdgeIps)
	}
	if m.removedusers != nil {
		edges = append(edges, machine.EdgeUsers)
	}
	if m.removedkeys != nil {
		edges = append(edges, machine.EdgeKeys)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *MachineMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case machine.EdgeIps:
		ids := make([]ent.Value, 0, len(m.removedips))
		for id := range m.removedips {
			ids = append(ids, id)
		}
		return ids
	case machine.EdgeUsers:
		ids := make([]ent.Value, 0, len(m.removedusers))
		for id := range m.removedusers {
			ids = append(ids, id)
		}
		return ids
	case machine.EdgeKeys:
		ids := make([]ent.Value, 0, len(m.removedkeys))
		for id := range m.removedkeys {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *MachineMutation) ClearedEdges() []string {
	edges := make([]string, 0, 3)
	if m.clearedips {
		edges = append(edges, machine.EdgeIps)
	}
	if m.clearedusers {
		edges = append(edges, machine.EdgeUsers)
	}
	if m.clearedkeys {
		edges = append(edges, machine.EdgeKeys)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *MachineMutation) EdgeCleared(name string) bool {
	switch name {
	case machine.EdgeIps:
		return m.clearedips
	case machine.EdgeUsers:
		return m.clearedusers
	case machine.EdgeKeys:
		return m.clearedkeys
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *MachineMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown Machine unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *MachineMutation) ResetEdge(name string) error {
	switch name {
	case machine.EdgeIps:
		m.ResetIps()
		return nil
	case machine.EdgeUsers:
		m.ResetUsers()
		return nil
	case machine.EdgeKeys:
		m.ResetKeys()
		return nil
	}
	return fmt.Errorf("unknown Machine edge %s", name)
}

// UserMutation represents an operation that mutates the User nodes in the graph.
type UserMutation struct {
	config
	op              Op
	typ             string
	id              *int
	username        *string
	password        *string
	clearedFields   map[string]struct{}
	machines        map[int]struct{}
	removedmachines map[int]struct{}
	clearedmachines bool
	keys            map[int]struct{}
	removedkeys     map[int]struct{}
	clearedkeys     bool
	done            bool
	oldValue        func(context.Context) (*User, error)
	predicates      []predicate.User
}

var _ ent.Mutation = (*UserMutation)(nil)

// userOption allows management of the mutation configuration using functional options.
type userOption func(*UserMutation)

// newUserMutation creates new mutation for the User entity.
func newUserMutation(c config, op Op, opts ...userOption) *UserMutation {
	m := &UserMutation{
		config:        c,
		op:            op,
		typ:           TypeUser,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withUserID sets the ID field of the mutation.
func withUserID(id int) userOption {
	return func(m *UserMutation) {
		var (
			err   error
			once  sync.Once
			value *User
		)
		m.oldValue = func(ctx context.Context) (*User, error) {
			once.Do(func() {
				if m.done {
					err = fmt.Errorf("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().User.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withUser sets the old User of the mutation.
func withUser(node *User) userOption {
	return func(m *UserMutation) {
		m.oldValue = func(context.Context) (*User, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m UserMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m UserMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, fmt.Errorf("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID
// is only available if it was provided to the builder.
func (m *UserMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// SetUsername sets the "username" field.
func (m *UserMutation) SetUsername(s string) {
	m.username = &s
}

// Username returns the value of the "username" field in the mutation.
func (m *UserMutation) Username() (r string, exists bool) {
	v := m.username
	if v == nil {
		return
	}
	return *v, true
}

// OldUsername returns the old "username" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldUsername(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldUsername is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldUsername requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUsername: %w", err)
	}
	return oldValue.Username, nil
}

// ResetUsername resets all changes to the "username" field.
func (m *UserMutation) ResetUsername() {
	m.username = nil
}

// SetPassword sets the "password" field.
func (m *UserMutation) SetPassword(s string) {
	m.password = &s
}

// Password returns the value of the "password" field in the mutation.
func (m *UserMutation) Password() (r string, exists bool) {
	v := m.password
	if v == nil {
		return
	}
	return *v, true
}

// OldPassword returns the old "password" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldPassword(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldPassword is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldPassword requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPassword: %w", err)
	}
	return oldValue.Password, nil
}

// ResetPassword resets all changes to the "password" field.
func (m *UserMutation) ResetPassword() {
	m.password = nil
}

// AddMachineIDs adds the "machines" edge to the Machine entity by ids.
func (m *UserMutation) AddMachineIDs(ids ...int) {
	if m.machines == nil {
		m.machines = make(map[int]struct{})
	}
	for i := range ids {
		m.machines[ids[i]] = struct{}{}
	}
}

// ClearMachines clears the "machines" edge to the Machine entity.
func (m *UserMutation) ClearMachines() {
	m.clearedmachines = true
}

// MachinesCleared returns if the "machines" edge to the Machine entity was cleared.
func (m *UserMutation) MachinesCleared() bool {
	return m.clearedmachines
}

// RemoveMachineIDs removes the "machines" edge to the Machine entity by IDs.
func (m *UserMutation) RemoveMachineIDs(ids ...int) {
	if m.removedmachines == nil {
		m.removedmachines = make(map[int]struct{})
	}
	for i := range ids {
		m.removedmachines[ids[i]] = struct{}{}
	}
}

// RemovedMachines returns the removed IDs of the "machines" edge to the Machine entity.
func (m *UserMutation) RemovedMachinesIDs() (ids []int) {
	for id := range m.removedmachines {
		ids = append(ids, id)
	}
	return
}

// MachinesIDs returns the "machines" edge IDs in the mutation.
func (m *UserMutation) MachinesIDs() (ids []int) {
	for id := range m.machines {
		ids = append(ids, id)
	}
	return
}

// ResetMachines resets all changes to the "machines" edge.
func (m *UserMutation) ResetMachines() {
	m.machines = nil
	m.clearedmachines = false
	m.removedmachines = nil
}

// AddKeyIDs adds the "keys" edge to the Key entity by ids.
func (m *UserMutation) AddKeyIDs(ids ...int) {
	if m.keys == nil {
		m.keys = make(map[int]struct{})
	}
	for i := range ids {
		m.keys[ids[i]] = struct{}{}
	}
}

// ClearKeys clears the "keys" edge to the Key entity.
func (m *UserMutation) ClearKeys() {
	m.clearedkeys = true
}

// KeysCleared returns if the "keys" edge to the Key entity was cleared.
func (m *UserMutation) KeysCleared() bool {
	return m.clearedkeys
}

// RemoveKeyIDs removes the "keys" edge to the Key entity by IDs.
func (m *UserMutation) RemoveKeyIDs(ids ...int) {
	if m.removedkeys == nil {
		m.removedkeys = make(map[int]struct{})
	}
	for i := range ids {
		m.removedkeys[ids[i]] = struct{}{}
	}
}

// RemovedKeys returns the removed IDs of the "keys" edge to the Key entity.
func (m *UserMutation) RemovedKeysIDs() (ids []int) {
	for id := range m.removedkeys {
		ids = append(ids, id)
	}
	return
}

// KeysIDs returns the "keys" edge IDs in the mutation.
func (m *UserMutation) KeysIDs() (ids []int) {
	for id := range m.keys {
		ids = append(ids, id)
	}
	return
}

// ResetKeys resets all changes to the "keys" edge.
func (m *UserMutation) ResetKeys() {
	m.keys = nil
	m.clearedkeys = false
	m.removedkeys = nil
}

// Op returns the operation name.
func (m *UserMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (User).
func (m *UserMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *UserMutation) Fields() []string {
	fields := make([]string, 0, 2)
	if m.username != nil {
		fields = append(fields, user.FieldUsername)
	}
	if m.password != nil {
		fields = append(fields, user.FieldPassword)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *UserMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case user.FieldUsername:
		return m.Username()
	case user.FieldPassword:
		return m.Password()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *UserMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case user.FieldUsername:
		return m.OldUsername(ctx)
	case user.FieldPassword:
		return m.OldPassword(ctx)
	}
	return nil, fmt.Errorf("unknown User field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *UserMutation) SetField(name string, value ent.Value) error {
	switch name {
	case user.FieldUsername:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUsername(v)
		return nil
	case user.FieldPassword:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPassword(v)
		return nil
	}
	return fmt.Errorf("unknown User field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *UserMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *UserMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *UserMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown User numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *UserMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *UserMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *UserMutation) ClearField(name string) error {
	return fmt.Errorf("unknown User nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *UserMutation) ResetField(name string) error {
	switch name {
	case user.FieldUsername:
		m.ResetUsername()
		return nil
	case user.FieldPassword:
		m.ResetPassword()
		return nil
	}
	return fmt.Errorf("unknown User field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *UserMutation) AddedEdges() []string {
	edges := make([]string, 0, 2)
	if m.machines != nil {
		edges = append(edges, user.EdgeMachines)
	}
	if m.keys != nil {
		edges = append(edges, user.EdgeKeys)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *UserMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case user.EdgeMachines:
		ids := make([]ent.Value, 0, len(m.machines))
		for id := range m.machines {
			ids = append(ids, id)
		}
		return ids
	case user.EdgeKeys:
		ids := make([]ent.Value, 0, len(m.keys))
		for id := range m.keys {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *UserMutation) RemovedEdges() []string {
	edges := make([]string, 0, 2)
	if m.removedmachines != nil {
		edges = append(edges, user.EdgeMachines)
	}
	if m.removedkeys != nil {
		edges = append(edges, user.EdgeKeys)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *UserMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case user.EdgeMachines:
		ids := make([]ent.Value, 0, len(m.removedmachines))
		for id := range m.removedmachines {
			ids = append(ids, id)
		}
		return ids
	case user.EdgeKeys:
		ids := make([]ent.Value, 0, len(m.removedkeys))
		for id := range m.removedkeys {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *UserMutation) ClearedEdges() []string {
	edges := make([]string, 0, 2)
	if m.clearedmachines {
		edges = append(edges, user.EdgeMachines)
	}
	if m.clearedkeys {
		edges = append(edges, user.EdgeKeys)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *UserMutation) EdgeCleared(name string) bool {
	switch name {
	case user.EdgeMachines:
		return m.clearedmachines
	case user.EdgeKeys:
		return m.clearedkeys
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *UserMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown User unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *UserMutation) ResetEdge(name string) error {
	switch name {
	case user.EdgeMachines:
		m.ResetMachines()
		return nil
	case user.EdgeKeys:
		m.ResetKeys()
		return nil
	}
	return fmt.Errorf("unknown User edge %s", name)
}
