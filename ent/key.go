// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent/dialect/sql"
	"github.com/ip-rw/ransack/ent/key"
	"github.com/ip-rw/ransack/ent/machine"
	"github.com/ip-rw/ransack/ent/user"
)

// Key is the model entity for the Key schema.
type Key struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Keyfile holds the value of the "keyfile" field.
	Keyfile []byte `json:"keyfile,omitempty"`
	// Password holds the value of the "password" field.
	Password string `json:"password,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the KeyQuery when eager-loading is set.
	Edges       KeyEdges `json:"edges"`
	key_machine *int
	key_user    *int
}

// KeyEdges holds the relations/edges for other nodes in the graph.
type KeyEdges struct {
	// Machine holds the value of the machine edge.
	Machine *Machine `json:"machine,omitempty"`
	// User holds the value of the user edge.
	User *User `json:"user,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// MachineOrErr returns the Machine value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e KeyEdges) MachineOrErr() (*Machine, error) {
	if e.loadedTypes[0] {
		if e.Machine == nil {
			// The edge machine was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: machine.Label}
		}
		return e.Machine, nil
	}
	return nil, &NotLoadedError{edge: "machine"}
}

// UserOrErr returns the User value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e KeyEdges) UserOrErr() (*User, error) {
	if e.loadedTypes[1] {
		if e.User == nil {
			// The edge user was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: user.Label}
		}
		return e.User, nil
	}
	return nil, &NotLoadedError{edge: "user"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Key) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case key.FieldKeyfile:
			values[i] = &[]byte{}
		case key.FieldID:
			values[i] = &sql.NullInt64{}
		case key.FieldPassword:
			values[i] = &sql.NullString{}
		case key.ForeignKeys[0]: // key_machine
			values[i] = &sql.NullInt64{}
		case key.ForeignKeys[1]: // key_user
			values[i] = &sql.NullInt64{}
		default:
			return nil, fmt.Errorf("unexpected column %q for type Key", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Key fields.
func (k *Key) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case key.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			k.ID = int(value.Int64)
		case key.FieldKeyfile:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field keyfile", values[i])
			} else if value != nil {
				k.Keyfile = *value
			}
		case key.FieldPassword:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field password", values[i])
			} else if value.Valid {
				k.Password = value.String
			}
		case key.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field key_machine", value)
			} else if value.Valid {
				k.key_machine = new(int)
				*k.key_machine = int(value.Int64)
			}
		case key.ForeignKeys[1]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field key_user", value)
			} else if value.Valid {
				k.key_user = new(int)
				*k.key_user = int(value.Int64)
			}
		}
	}
	return nil
}

// QueryMachine queries the "machine" edge of the Key entity.
func (k *Key) QueryMachine() *MachineQuery {
	return (&KeyClient{config: k.config}).QueryMachine(k)
}

// QueryUser queries the "user" edge of the Key entity.
func (k *Key) QueryUser() *UserQuery {
	return (&KeyClient{config: k.config}).QueryUser(k)
}

// Update returns a builder for updating this Key.
// Note that you need to call Key.Unwrap() before calling this method if this Key
// was returned from a transaction, and the transaction was committed or rolled back.
func (k *Key) Update() *KeyUpdateOne {
	return (&KeyClient{config: k.config}).UpdateOne(k)
}

// Unwrap unwraps the Key entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (k *Key) Unwrap() *Key {
	tx, ok := k.config.driver.(*txDriver)
	if !ok {
		panic("ent: Key is not a transactional entity")
	}
	k.config.driver = tx.drv
	return k
}

// String implements the fmt.Stringer.
func (k *Key) String() string {
	var builder strings.Builder
	builder.WriteString("Key(")
	builder.WriteString(fmt.Sprintf("id=%v", k.ID))
	builder.WriteString(", keyfile=")
	builder.WriteString(fmt.Sprintf("%v", k.Keyfile))
	builder.WriteString(", password=")
	builder.WriteString(k.Password)
	builder.WriteByte(')')
	return builder.String()
}

// Keys is a parsable slice of Key.
type Keys []*Key

func (k Keys) config(cfg config) {
	for _i := range k {
		k[_i].config = cfg
	}
}
