// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent/dialect/sql"
	"github.com/ip-rw/ransack/ent/machine"
)

// Machine is the model entity for the Machine schema.
type Machine struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Hwid holds the value of the "hwid" field.
	Hwid string `json:"hwid,omitempty"`
	// Hostname holds the value of the "hostname" field.
	Hostname string `json:"hostname,omitempty"`
	// Fingerprint holds the value of the "fingerprint" field.
	Fingerprint string `json:"fingerprint,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the MachineQuery when eager-loading is set.
	Edges MachineEdges `json:"edges"`
}

// MachineEdges holds the relations/edges for other nodes in the graph.
type MachineEdges struct {
	// Ips holds the value of the ips edge.
	Ips []*IP `json:"ips,omitempty"`
	// Users holds the value of the users edge.
	Users []*User `json:"users,omitempty"`
	// Keys holds the value of the keys edge.
	Keys []*Key `json:"keys,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [3]bool
}

// IpsOrErr returns the Ips value or an error if the edge
// was not loaded in eager-loading.
func (e MachineEdges) IpsOrErr() ([]*IP, error) {
	if e.loadedTypes[0] {
		return e.Ips, nil
	}
	return nil, &NotLoadedError{edge: "ips"}
}

// UsersOrErr returns the Users value or an error if the edge
// was not loaded in eager-loading.
func (e MachineEdges) UsersOrErr() ([]*User, error) {
	if e.loadedTypes[1] {
		return e.Users, nil
	}
	return nil, &NotLoadedError{edge: "users"}
}

// KeysOrErr returns the Keys value or an error if the edge
// was not loaded in eager-loading.
func (e MachineEdges) KeysOrErr() ([]*Key, error) {
	if e.loadedTypes[2] {
		return e.Keys, nil
	}
	return nil, &NotLoadedError{edge: "keys"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Machine) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case machine.FieldID:
			values[i] = &sql.NullInt64{}
		case machine.FieldHwid, machine.FieldHostname, machine.FieldFingerprint:
			values[i] = &sql.NullString{}
		default:
			return nil, fmt.Errorf("unexpected column %q for type Machine", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Machine fields.
func (m *Machine) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case machine.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			m.ID = int(value.Int64)
		case machine.FieldHwid:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field hwid", values[i])
			} else if value.Valid {
				m.Hwid = value.String
			}
		case machine.FieldHostname:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field hostname", values[i])
			} else if value.Valid {
				m.Hostname = value.String
			}
		case machine.FieldFingerprint:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field fingerprint", values[i])
			} else if value.Valid {
				m.Fingerprint = value.String
			}
		}
	}
	return nil
}

// QueryIps queries the "ips" edge of the Machine entity.
func (m *Machine) QueryIps() *IPQuery {
	return (&MachineClient{config: m.config}).QueryIps(m)
}

// QueryUsers queries the "users" edge of the Machine entity.
func (m *Machine) QueryUsers() *UserQuery {
	return (&MachineClient{config: m.config}).QueryUsers(m)
}

// QueryKeys queries the "keys" edge of the Machine entity.
func (m *Machine) QueryKeys() *KeyQuery {
	return (&MachineClient{config: m.config}).QueryKeys(m)
}

// Update returns a builder for updating this Machine.
// Note that you need to call Machine.Unwrap() before calling this method if this Machine
// was returned from a transaction, and the transaction was committed or rolled back.
func (m *Machine) Update() *MachineUpdateOne {
	return (&MachineClient{config: m.config}).UpdateOne(m)
}

// Unwrap unwraps the Machine entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (m *Machine) Unwrap() *Machine {
	tx, ok := m.config.driver.(*txDriver)
	if !ok {
		panic("ent: Machine is not a transactional entity")
	}
	m.config.driver = tx.drv
	return m
}

// String implements the fmt.Stringer.
func (m *Machine) String() string {
	var builder strings.Builder
	builder.WriteString("Machine(")
	builder.WriteString(fmt.Sprintf("id=%v", m.ID))
	builder.WriteString(", hwid=")
	builder.WriteString(m.Hwid)
	builder.WriteString(", hostname=")
	builder.WriteString(m.Hostname)
	builder.WriteString(", fingerprint=")
	builder.WriteString(m.Fingerprint)
	builder.WriteByte(')')
	return builder.String()
}

// Machines is a parsable slice of Machine.
type Machines []*Machine

func (m Machines) config(cfg config) {
	for _i := range m {
		m[_i].config = cfg
	}
}
