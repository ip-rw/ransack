// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/ip-rw/ransack/ent/key"
	"github.com/ip-rw/ransack/ent/machine"
	"github.com/ip-rw/ransack/ent/predicate"
	"github.com/ip-rw/ransack/ent/user"
)

// KeyUpdate is the builder for updating Key entities.
type KeyUpdate struct {
	config
	hooks    []Hook
	mutation *KeyMutation
}

// Where adds a new predicate for the KeyUpdate builder.
func (ku *KeyUpdate) Where(ps ...predicate.Key) *KeyUpdate {
	ku.mutation.predicates = append(ku.mutation.predicates, ps...)
	return ku
}

// SetKeyfile sets the "keyfile" field.
func (ku *KeyUpdate) SetKeyfile(b []byte) *KeyUpdate {
	ku.mutation.SetKeyfile(b)
	return ku
}

// SetPassword sets the "password" field.
func (ku *KeyUpdate) SetPassword(s string) *KeyUpdate {
	ku.mutation.SetPassword(s)
	return ku
}

// SetNillablePassword sets the "password" field if the given value is not nil.
func (ku *KeyUpdate) SetNillablePassword(s *string) *KeyUpdate {
	if s != nil {
		ku.SetPassword(*s)
	}
	return ku
}

// ClearPassword clears the value of the "password" field.
func (ku *KeyUpdate) ClearPassword() *KeyUpdate {
	ku.mutation.ClearPassword()
	return ku
}

// SetMachineID sets the "machine" edge to the Machine entity by ID.
func (ku *KeyUpdate) SetMachineID(id int) *KeyUpdate {
	ku.mutation.SetMachineID(id)
	return ku
}

// SetNillableMachineID sets the "machine" edge to the Machine entity by ID if the given value is not nil.
func (ku *KeyUpdate) SetNillableMachineID(id *int) *KeyUpdate {
	if id != nil {
		ku = ku.SetMachineID(*id)
	}
	return ku
}

// SetMachine sets the "machine" edge to the Machine entity.
func (ku *KeyUpdate) SetMachine(m *Machine) *KeyUpdate {
	return ku.SetMachineID(m.ID)
}

// SetUserID sets the "user" edge to the User entity by ID.
func (ku *KeyUpdate) SetUserID(id int) *KeyUpdate {
	ku.mutation.SetUserID(id)
	return ku
}

// SetNillableUserID sets the "user" edge to the User entity by ID if the given value is not nil.
func (ku *KeyUpdate) SetNillableUserID(id *int) *KeyUpdate {
	if id != nil {
		ku = ku.SetUserID(*id)
	}
	return ku
}

// SetUser sets the "user" edge to the User entity.
func (ku *KeyUpdate) SetUser(u *User) *KeyUpdate {
	return ku.SetUserID(u.ID)
}

// Mutation returns the KeyMutation object of the builder.
func (ku *KeyUpdate) Mutation() *KeyMutation {
	return ku.mutation
}

// ClearMachine clears the "machine" edge to the Machine entity.
func (ku *KeyUpdate) ClearMachine() *KeyUpdate {
	ku.mutation.ClearMachine()
	return ku
}

// ClearUser clears the "user" edge to the User entity.
func (ku *KeyUpdate) ClearUser() *KeyUpdate {
	ku.mutation.ClearUser()
	return ku
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (ku *KeyUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(ku.hooks) == 0 {
		affected, err = ku.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*KeyMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			ku.mutation = mutation
			affected, err = ku.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(ku.hooks) - 1; i >= 0; i-- {
			mut = ku.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, ku.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (ku *KeyUpdate) SaveX(ctx context.Context) int {
	affected, err := ku.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (ku *KeyUpdate) Exec(ctx context.Context) error {
	_, err := ku.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ku *KeyUpdate) ExecX(ctx context.Context) {
	if err := ku.Exec(ctx); err != nil {
		panic(err)
	}
}

func (ku *KeyUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   key.Table,
			Columns: key.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: key.FieldID,
			},
		},
	}
	if ps := ku.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ku.mutation.Keyfile(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBytes,
			Value:  value,
			Column: key.FieldKeyfile,
		})
	}
	if value, ok := ku.mutation.Password(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: key.FieldPassword,
		})
	}
	if ku.mutation.PasswordCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: key.FieldPassword,
		})
	}
	if ku.mutation.MachineCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   key.MachineTable,
			Columns: []string{key.MachineColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: machine.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ku.mutation.MachineIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   key.MachineTable,
			Columns: []string{key.MachineColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: machine.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ku.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   key.UserTable,
			Columns: []string{key.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ku.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   key.UserTable,
			Columns: []string{key.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, ku.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{key.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return 0, err
	}
	return n, nil
}

// KeyUpdateOne is the builder for updating a single Key entity.
type KeyUpdateOne struct {
	config
	hooks    []Hook
	mutation *KeyMutation
}

// SetKeyfile sets the "keyfile" field.
func (kuo *KeyUpdateOne) SetKeyfile(b []byte) *KeyUpdateOne {
	kuo.mutation.SetKeyfile(b)
	return kuo
}

// SetPassword sets the "password" field.
func (kuo *KeyUpdateOne) SetPassword(s string) *KeyUpdateOne {
	kuo.mutation.SetPassword(s)
	return kuo
}

// SetNillablePassword sets the "password" field if the given value is not nil.
func (kuo *KeyUpdateOne) SetNillablePassword(s *string) *KeyUpdateOne {
	if s != nil {
		kuo.SetPassword(*s)
	}
	return kuo
}

// ClearPassword clears the value of the "password" field.
func (kuo *KeyUpdateOne) ClearPassword() *KeyUpdateOne {
	kuo.mutation.ClearPassword()
	return kuo
}

// SetMachineID sets the "machine" edge to the Machine entity by ID.
func (kuo *KeyUpdateOne) SetMachineID(id int) *KeyUpdateOne {
	kuo.mutation.SetMachineID(id)
	return kuo
}

// SetNillableMachineID sets the "machine" edge to the Machine entity by ID if the given value is not nil.
func (kuo *KeyUpdateOne) SetNillableMachineID(id *int) *KeyUpdateOne {
	if id != nil {
		kuo = kuo.SetMachineID(*id)
	}
	return kuo
}

// SetMachine sets the "machine" edge to the Machine entity.
func (kuo *KeyUpdateOne) SetMachine(m *Machine) *KeyUpdateOne {
	return kuo.SetMachineID(m.ID)
}

// SetUserID sets the "user" edge to the User entity by ID.
func (kuo *KeyUpdateOne) SetUserID(id int) *KeyUpdateOne {
	kuo.mutation.SetUserID(id)
	return kuo
}

// SetNillableUserID sets the "user" edge to the User entity by ID if the given value is not nil.
func (kuo *KeyUpdateOne) SetNillableUserID(id *int) *KeyUpdateOne {
	if id != nil {
		kuo = kuo.SetUserID(*id)
	}
	return kuo
}

// SetUser sets the "user" edge to the User entity.
func (kuo *KeyUpdateOne) SetUser(u *User) *KeyUpdateOne {
	return kuo.SetUserID(u.ID)
}

// Mutation returns the KeyMutation object of the builder.
func (kuo *KeyUpdateOne) Mutation() *KeyMutation {
	return kuo.mutation
}

// ClearMachine clears the "machine" edge to the Machine entity.
func (kuo *KeyUpdateOne) ClearMachine() *KeyUpdateOne {
	kuo.mutation.ClearMachine()
	return kuo
}

// ClearUser clears the "user" edge to the User entity.
func (kuo *KeyUpdateOne) ClearUser() *KeyUpdateOne {
	kuo.mutation.ClearUser()
	return kuo
}

// Save executes the query and returns the updated Key entity.
func (kuo *KeyUpdateOne) Save(ctx context.Context) (*Key, error) {
	var (
		err  error
		node *Key
	)
	if len(kuo.hooks) == 0 {
		node, err = kuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*KeyMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			kuo.mutation = mutation
			node, err = kuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(kuo.hooks) - 1; i >= 0; i-- {
			mut = kuo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, kuo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (kuo *KeyUpdateOne) SaveX(ctx context.Context) *Key {
	node, err := kuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (kuo *KeyUpdateOne) Exec(ctx context.Context) error {
	_, err := kuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (kuo *KeyUpdateOne) ExecX(ctx context.Context) {
	if err := kuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (kuo *KeyUpdateOne) sqlSave(ctx context.Context) (_node *Key, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   key.Table,
			Columns: key.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: key.FieldID,
			},
		},
	}
	id, ok := kuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing Key.ID for update")}
	}
	_spec.Node.ID.Value = id
	if ps := kuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := kuo.mutation.Keyfile(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBytes,
			Value:  value,
			Column: key.FieldKeyfile,
		})
	}
	if value, ok := kuo.mutation.Password(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: key.FieldPassword,
		})
	}
	if kuo.mutation.PasswordCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: key.FieldPassword,
		})
	}
	if kuo.mutation.MachineCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   key.MachineTable,
			Columns: []string{key.MachineColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: machine.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := kuo.mutation.MachineIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   key.MachineTable,
			Columns: []string{key.MachineColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: machine.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if kuo.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   key.UserTable,
			Columns: []string{key.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := kuo.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   key.UserTable,
			Columns: []string{key.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Key{config: kuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, kuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{key.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return _node, nil
}
