// Code generated by protoc-gen-entgrpc. DO NOT EDIT.
package entpb

import (
	context "context"
	sqlgraph "entgo.io/ent/dialect/sql/sqlgraph"
	empty "github.com/golang/protobuf/ptypes/empty"
	ent "github.com/ip-rw/ransack/ent"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// KeyService implements KeyServiceServer
type KeyService struct {
	client *ent.Client
	UnimplementedKeyServiceServer
}

// NewKeyService returns a new KeyService
func NewKeyService(client *ent.Client) *KeyService {
	return &KeyService{
		client: client,
	}
}

// toProtoKey transforms the ent type to the pb type
func toProtoKey(e *ent.Key) *Key {
	return &Key{
		Id:       int32(e.ID),
		Keyfile:  []byte(e.Keyfile),
		Password: string(e.Password),
	}
}

// Create implements KeyServiceServer.Create
func (svc *KeyService) Create(ctx context.Context, req *CreateKeyRequest) (*Key, error) {
	key := req.GetKey()
	res, err := svc.client.Key.Create().
		SetKeyfile([]byte(key.GetKeyfile())).
		SetPassword(string(key.GetPassword())).
		SetMachineID(int(key.GetMachine().GetId())).
		SetUserID(int(key.GetUser().GetId())).
		Save(ctx)

	switch {
	case err == nil:
		return toProtoKey(res), nil
	case sqlgraph.IsUniqueConstraintError(err):
		return nil, status.Errorf(codes.AlreadyExists, "already exists: %s", err)
	case ent.IsConstraintError(err):
		return nil, status.Errorf(codes.InvalidArgument, "invalid argument: %s", err)
	default:
		return nil, status.Errorf(codes.Internal, "internal: %s", err)
	}
}

// Get implements KeyServiceServer.Get
func (svc *KeyService) Get(ctx context.Context, req *GetKeyRequest) (*Key, error) {
	get, err := svc.client.Key.Get(ctx, int(req.GetId()))
	switch {
	case err == nil:
		return toProtoKey(get), nil
	case ent.IsNotFound(err):
		return nil, status.Errorf(codes.NotFound, "not found: %s", err)
	default:
		return nil, status.Errorf(codes.Internal, "internal error: %s", err)
	}
}

// Update implements KeyServiceServer.Update
func (svc *KeyService) Update(ctx context.Context, req *UpdateKeyRequest) (*Key, error) {
	key := req.GetKey()
	res, err := svc.client.Key.UpdateOneID(int(key.GetId())).
		SetKeyfile([]byte(key.GetKeyfile())).
		SetPassword(string(key.GetPassword())).
		SetMachineID(int(key.GetMachine().GetId())).
		SetUserID(int(key.GetUser().GetId())).
		Save(ctx)

	switch {
	case err == nil:
		return toProtoKey(res), nil
	case sqlgraph.IsUniqueConstraintError(err):
		return nil, status.Errorf(codes.AlreadyExists, "already exists: %s", err)
	case ent.IsConstraintError(err):
		return nil, status.Errorf(codes.InvalidArgument, "invalid argument: %s", err)
	default:
		return nil, status.Errorf(codes.Internal, "internal: %s", err)
	}
}

// Delete implements KeyServiceServer.Delete
func (svc *KeyService) Delete(ctx context.Context, req *DeleteKeyRequest) (*empty.Empty, error) {
	err := svc.client.Key.DeleteOneID(int(req.GetId())).Exec(ctx)
	switch {
	case err == nil:
		return &emptypb.Empty{}, nil
	case ent.IsNotFound(err):
		return nil, status.Errorf(codes.NotFound, "not found: %s", err)
	default:
		return nil, status.Errorf(codes.Internal, "internal error: %s", err)
	}
}
