// Code generated by entc, DO NOT EDIT.

package machine

const (
	// Label holds the string label denoting the machine type in the database.
	Label = "machine"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldHwid holds the string denoting the hwid field in the database.
	FieldHwid = "hwid"
	// FieldHostname holds the string denoting the hostname field in the database.
	FieldHostname = "hostname"
	// FieldFingerprint holds the string denoting the fingerprint field in the database.
	FieldFingerprint = "fingerprint"
	// EdgeIps holds the string denoting the ips edge name in mutations.
	EdgeIps = "ips"
	// EdgeUsers holds the string denoting the users edge name in mutations.
	EdgeUsers = "users"
	// EdgeKeys holds the string denoting the keys edge name in mutations.
	EdgeKeys = "keys"
	// Table holds the table name of the machine in the database.
	Table = "machines"
	// IpsTable is the table the holds the ips relation/edge.
	IpsTable = "ips"
	// IpsInverseTable is the table name for the IP entity.
	// It exists in this package in order to avoid circular dependency with the "ip" package.
	IpsInverseTable = "ips"
	// IpsColumn is the table column denoting the ips relation/edge.
	IpsColumn = "ip_machine"
	// UsersTable is the table the holds the users relation/edge. The primary key declared below.
	UsersTable = "user_machines"
	// UsersInverseTable is the table name for the User entity.
	// It exists in this package in order to avoid circular dependency with the "user" package.
	UsersInverseTable = "users"
	// KeysTable is the table the holds the keys relation/edge.
	KeysTable = "keys"
	// KeysInverseTable is the table name for the Key entity.
	// It exists in this package in order to avoid circular dependency with the "key" package.
	KeysInverseTable = "keys"
	// KeysColumn is the table column denoting the keys relation/edge.
	KeysColumn = "key_machine"
)

// Columns holds all SQL columns for machine fields.
var Columns = []string{
	FieldID,
	FieldHwid,
	FieldHostname,
	FieldFingerprint,
}

var (
	// UsersPrimaryKey and UsersColumn2 are the table columns denoting the
	// primary key for the users relation (M2M).
	UsersPrimaryKey = []string{"user_id", "machine_id"}
)

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// HwidValidator is a validator for the "hwid" field. It is called by the builders before save.
	HwidValidator func(string) error
	// HostnameValidator is a validator for the "hostname" field. It is called by the builders before save.
	HostnameValidator func(string) error
	// FingerprintValidator is a validator for the "fingerprint" field. It is called by the builders before save.
	FingerprintValidator func(string) error
)
