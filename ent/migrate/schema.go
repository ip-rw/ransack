// Code generated by entc, DO NOT EDIT.

package migrate

import (
	"entgo.io/ent/dialect/sql/schema"
	"entgo.io/ent/schema/field"
)

var (
	// IpsColumns holds the columns for the "ips" table.
	IpsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "ip", Type: field.TypeString, Unique: true},
		{Name: "net", Type: field.TypeString},
		{Name: "mask", Type: field.TypeInt, Default: 24},
		{Name: "ip_machine", Type: field.TypeInt, Nullable: true},
	}
	// IpsTable holds the schema information for the "ips" table.
	IpsTable = &schema.Table{
		Name:       "ips",
		Columns:    IpsColumns,
		PrimaryKey: []*schema.Column{IpsColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "ips_machines_machine",
				Columns:    []*schema.Column{IpsColumns[4]},
				RefColumns: []*schema.Column{MachinesColumns[0]},
				OnDelete:   schema.SetNull,
			},
		},
	}
	// KeysColumns holds the columns for the "keys" table.
	KeysColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "keyfile", Type: field.TypeBytes},
		{Name: "password", Type: field.TypeString, Nullable: true},
		{Name: "key_machine", Type: field.TypeInt, Nullable: true},
		{Name: "key_user", Type: field.TypeInt, Nullable: true},
	}
	// KeysTable holds the schema information for the "keys" table.
	KeysTable = &schema.Table{
		Name:       "keys",
		Columns:    KeysColumns,
		PrimaryKey: []*schema.Column{KeysColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "keys_machines_machine",
				Columns:    []*schema.Column{KeysColumns[3]},
				RefColumns: []*schema.Column{MachinesColumns[0]},
				OnDelete:   schema.SetNull,
			},
			{
				Symbol:     "keys_users_user",
				Columns:    []*schema.Column{KeysColumns[4]},
				RefColumns: []*schema.Column{UsersColumns[0]},
				OnDelete:   schema.SetNull,
			},
		},
	}
	// MachinesColumns holds the columns for the "machines" table.
	MachinesColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "hwid", Type: field.TypeString},
		{Name: "hostname", Type: field.TypeString},
		{Name: "fingerprint", Type: field.TypeString},
	}
	// MachinesTable holds the schema information for the "machines" table.
	MachinesTable = &schema.Table{
		Name:        "machines",
		Columns:     MachinesColumns,
		PrimaryKey:  []*schema.Column{MachinesColumns[0]},
		ForeignKeys: []*schema.ForeignKey{},
	}
	// UsersColumns holds the columns for the "users" table.
	UsersColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "username", Type: field.TypeString},
		{Name: "password", Type: field.TypeString},
	}
	// UsersTable holds the schema information for the "users" table.
	UsersTable = &schema.Table{
		Name:        "users",
		Columns:     UsersColumns,
		PrimaryKey:  []*schema.Column{UsersColumns[0]},
		ForeignKeys: []*schema.ForeignKey{},
	}
	// UserMachinesColumns holds the columns for the "user_machines" table.
	UserMachinesColumns = []*schema.Column{
		{Name: "user_id", Type: field.TypeInt},
		{Name: "machine_id", Type: field.TypeInt},
	}
	// UserMachinesTable holds the schema information for the "user_machines" table.
	UserMachinesTable = &schema.Table{
		Name:       "user_machines",
		Columns:    UserMachinesColumns,
		PrimaryKey: []*schema.Column{UserMachinesColumns[0], UserMachinesColumns[1]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "user_machines_user_id",
				Columns:    []*schema.Column{UserMachinesColumns[0]},
				RefColumns: []*schema.Column{UsersColumns[0]},
				OnDelete:   schema.Cascade,
			},
			{
				Symbol:     "user_machines_machine_id",
				Columns:    []*schema.Column{UserMachinesColumns[1]},
				RefColumns: []*schema.Column{MachinesColumns[0]},
				OnDelete:   schema.Cascade,
			},
		},
	}
	// Tables holds all the tables in the schema.
	Tables = []*schema.Table{
		IpsTable,
		KeysTable,
		MachinesTable,
		UsersTable,
		UserMachinesTable,
	}
)

func init() {
	IpsTable.ForeignKeys[0].RefTable = MachinesTable
	KeysTable.ForeignKeys[0].RefTable = MachinesTable
	KeysTable.ForeignKeys[1].RefTable = UsersTable
	UserMachinesTable.ForeignKeys[0].RefTable = UsersTable
	UserMachinesTable.ForeignKeys[1].RefTable = MachinesTable
}
