// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"math"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/ip-rw/ransack/ent/key"
	"github.com/ip-rw/ransack/ent/machine"
	"github.com/ip-rw/ransack/ent/predicate"
	"github.com/ip-rw/ransack/ent/user"
)

// KeyQuery is the builder for querying Key entities.
type KeyQuery struct {
	config
	limit      *int
	offset     *int
	order      []OrderFunc
	fields     []string
	predicates []predicate.Key
	// eager-loading edges.
	withMachine *MachineQuery
	withUser    *UserQuery
	withFKs     bool
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the KeyQuery builder.
func (kq *KeyQuery) Where(ps ...predicate.Key) *KeyQuery {
	kq.predicates = append(kq.predicates, ps...)
	return kq
}

// Limit adds a limit step to the query.
func (kq *KeyQuery) Limit(limit int) *KeyQuery {
	kq.limit = &limit
	return kq
}

// Offset adds an offset step to the query.
func (kq *KeyQuery) Offset(offset int) *KeyQuery {
	kq.offset = &offset
	return kq
}

// Order adds an order step to the query.
func (kq *KeyQuery) Order(o ...OrderFunc) *KeyQuery {
	kq.order = append(kq.order, o...)
	return kq
}

// QueryMachine chains the current query on the "machine" edge.
func (kq *KeyQuery) QueryMachine() *MachineQuery {
	query := &MachineQuery{config: kq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := kq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := kq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(key.Table, key.FieldID, selector),
			sqlgraph.To(machine.Table, machine.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, key.MachineTable, key.MachineColumn),
		)
		fromU = sqlgraph.SetNeighbors(kq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryUser chains the current query on the "user" edge.
func (kq *KeyQuery) QueryUser() *UserQuery {
	query := &UserQuery{config: kq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := kq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := kq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(key.Table, key.FieldID, selector),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, key.UserTable, key.UserColumn),
		)
		fromU = sqlgraph.SetNeighbors(kq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first Key entity from the query.
// Returns a *NotFoundError when no Key was found.
func (kq *KeyQuery) First(ctx context.Context) (*Key, error) {
	nodes, err := kq.Limit(1).All(ctx)
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{key.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (kq *KeyQuery) FirstX(ctx context.Context) *Key {
	node, err := kq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first Key ID from the query.
// Returns a *NotFoundError when no Key ID was found.
func (kq *KeyQuery) FirstID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = kq.Limit(1).IDs(ctx); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{key.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (kq *KeyQuery) FirstIDX(ctx context.Context) int {
	id, err := kq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single Key entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when exactly one Key entity is not found.
// Returns a *NotFoundError when no Key entities are found.
func (kq *KeyQuery) Only(ctx context.Context) (*Key, error) {
	nodes, err := kq.Limit(2).All(ctx)
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{key.Label}
	default:
		return nil, &NotSingularError{key.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (kq *KeyQuery) OnlyX(ctx context.Context) *Key {
	node, err := kq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only Key ID in the query.
// Returns a *NotSingularError when exactly one Key ID is not found.
// Returns a *NotFoundError when no entities are found.
func (kq *KeyQuery) OnlyID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = kq.Limit(2).IDs(ctx); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{key.Label}
	default:
		err = &NotSingularError{key.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (kq *KeyQuery) OnlyIDX(ctx context.Context) int {
	id, err := kq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of Keys.
func (kq *KeyQuery) All(ctx context.Context) ([]*Key, error) {
	if err := kq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	return kq.sqlAll(ctx)
}

// AllX is like All, but panics if an error occurs.
func (kq *KeyQuery) AllX(ctx context.Context) []*Key {
	nodes, err := kq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of Key IDs.
func (kq *KeyQuery) IDs(ctx context.Context) ([]int, error) {
	var ids []int
	if err := kq.Select(key.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (kq *KeyQuery) IDsX(ctx context.Context) []int {
	ids, err := kq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (kq *KeyQuery) Count(ctx context.Context) (int, error) {
	if err := kq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return kq.sqlCount(ctx)
}

// CountX is like Count, but panics if an error occurs.
func (kq *KeyQuery) CountX(ctx context.Context) int {
	count, err := kq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (kq *KeyQuery) Exist(ctx context.Context) (bool, error) {
	if err := kq.prepareQuery(ctx); err != nil {
		return false, err
	}
	return kq.sqlExist(ctx)
}

// ExistX is like Exist, but panics if an error occurs.
func (kq *KeyQuery) ExistX(ctx context.Context) bool {
	exist, err := kq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the KeyQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (kq *KeyQuery) Clone() *KeyQuery {
	if kq == nil {
		return nil
	}
	return &KeyQuery{
		config:      kq.config,
		limit:       kq.limit,
		offset:      kq.offset,
		order:       append([]OrderFunc{}, kq.order...),
		predicates:  append([]predicate.Key{}, kq.predicates...),
		withMachine: kq.withMachine.Clone(),
		withUser:    kq.withUser.Clone(),
		// clone intermediate query.
		sql:  kq.sql.Clone(),
		path: kq.path,
	}
}

// WithMachine tells the query-builder to eager-load the nodes that are connected to
// the "machine" edge. The optional arguments are used to configure the query builder of the edge.
func (kq *KeyQuery) WithMachine(opts ...func(*MachineQuery)) *KeyQuery {
	query := &MachineQuery{config: kq.config}
	for _, opt := range opts {
		opt(query)
	}
	kq.withMachine = query
	return kq
}

// WithUser tells the query-builder to eager-load the nodes that are connected to
// the "user" edge. The optional arguments are used to configure the query builder of the edge.
func (kq *KeyQuery) WithUser(opts ...func(*UserQuery)) *KeyQuery {
	query := &UserQuery{config: kq.config}
	for _, opt := range opts {
		opt(query)
	}
	kq.withUser = query
	return kq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		Keyfile []byte `json:"keyfile,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.Key.Query().
//		GroupBy(key.FieldKeyfile).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
//
func (kq *KeyQuery) GroupBy(field string, fields ...string) *KeyGroupBy {
	group := &KeyGroupBy{config: kq.config}
	group.fields = append([]string{field}, fields...)
	group.path = func(ctx context.Context) (prev *sql.Selector, err error) {
		if err := kq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		return kq.sqlQuery(ctx), nil
	}
	return group
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		Keyfile []byte `json:"keyfile,omitempty"`
//	}
//
//	client.Key.Query().
//		Select(key.FieldKeyfile).
//		Scan(ctx, &v)
//
func (kq *KeyQuery) Select(field string, fields ...string) *KeySelect {
	kq.fields = append([]string{field}, fields...)
	return &KeySelect{KeyQuery: kq}
}

func (kq *KeyQuery) prepareQuery(ctx context.Context) error {
	for _, f := range kq.fields {
		if !key.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if kq.path != nil {
		prev, err := kq.path(ctx)
		if err != nil {
			return err
		}
		kq.sql = prev
	}
	return nil
}

func (kq *KeyQuery) sqlAll(ctx context.Context) ([]*Key, error) {
	var (
		nodes       = []*Key{}
		withFKs     = kq.withFKs
		_spec       = kq.querySpec()
		loadedTypes = [2]bool{
			kq.withMachine != nil,
			kq.withUser != nil,
		}
	)
	if kq.withMachine != nil || kq.withUser != nil {
		withFKs = true
	}
	if withFKs {
		_spec.Node.Columns = append(_spec.Node.Columns, key.ForeignKeys...)
	}
	_spec.ScanValues = func(columns []string) ([]interface{}, error) {
		node := &Key{config: kq.config}
		nodes = append(nodes, node)
		return node.scanValues(columns)
	}
	_spec.Assign = func(columns []string, values []interface{}) error {
		if len(nodes) == 0 {
			return fmt.Errorf("ent: Assign called without calling ScanValues")
		}
		node := nodes[len(nodes)-1]
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	if err := sqlgraph.QueryNodes(ctx, kq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}

	if query := kq.withMachine; query != nil {
		ids := make([]int, 0, len(nodes))
		nodeids := make(map[int][]*Key)
		for i := range nodes {
			fk := nodes[i].key_machine
			if fk != nil {
				ids = append(ids, *fk)
				nodeids[*fk] = append(nodeids[*fk], nodes[i])
			}
		}
		query.Where(machine.IDIn(ids...))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			nodes, ok := nodeids[n.ID]
			if !ok {
				return nil, fmt.Errorf(`unexpected foreign-key "key_machine" returned %v`, n.ID)
			}
			for i := range nodes {
				nodes[i].Edges.Machine = n
			}
		}
	}

	if query := kq.withUser; query != nil {
		ids := make([]int, 0, len(nodes))
		nodeids := make(map[int][]*Key)
		for i := range nodes {
			fk := nodes[i].key_user
			if fk != nil {
				ids = append(ids, *fk)
				nodeids[*fk] = append(nodeids[*fk], nodes[i])
			}
		}
		query.Where(user.IDIn(ids...))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			nodes, ok := nodeids[n.ID]
			if !ok {
				return nil, fmt.Errorf(`unexpected foreign-key "key_user" returned %v`, n.ID)
			}
			for i := range nodes {
				nodes[i].Edges.User = n
			}
		}
	}

	return nodes, nil
}

func (kq *KeyQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := kq.querySpec()
	return sqlgraph.CountNodes(ctx, kq.driver, _spec)
}

func (kq *KeyQuery) sqlExist(ctx context.Context) (bool, error) {
	n, err := kq.sqlCount(ctx)
	if err != nil {
		return false, fmt.Errorf("ent: check existence: %w", err)
	}
	return n > 0, nil
}

func (kq *KeyQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := &sqlgraph.QuerySpec{
		Node: &sqlgraph.NodeSpec{
			Table:   key.Table,
			Columns: key.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: key.FieldID,
			},
		},
		From:   kq.sql,
		Unique: true,
	}
	if fields := kq.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, key.FieldID)
		for i := range fields {
			if fields[i] != key.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
	}
	if ps := kq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := kq.limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := kq.offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := kq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector, key.ValidColumn)
			}
		}
	}
	return _spec
}

func (kq *KeyQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(kq.driver.Dialect())
	t1 := builder.Table(key.Table)
	selector := builder.Select(t1.Columns(key.Columns...)...).From(t1)
	if kq.sql != nil {
		selector = kq.sql
		selector.Select(selector.Columns(key.Columns...)...)
	}
	for _, p := range kq.predicates {
		p(selector)
	}
	for _, p := range kq.order {
		p(selector, key.ValidColumn)
	}
	if offset := kq.offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := kq.limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// KeyGroupBy is the group-by builder for Key entities.
type KeyGroupBy struct {
	config
	fields []string
	fns    []AggregateFunc
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Aggregate adds the given aggregation functions to the group-by query.
func (kgb *KeyGroupBy) Aggregate(fns ...AggregateFunc) *KeyGroupBy {
	kgb.fns = append(kgb.fns, fns...)
	return kgb
}

// Scan applies the group-by query and scans the result into the given value.
func (kgb *KeyGroupBy) Scan(ctx context.Context, v interface{}) error {
	query, err := kgb.path(ctx)
	if err != nil {
		return err
	}
	kgb.sql = query
	return kgb.sqlScan(ctx, v)
}

// ScanX is like Scan, but panics if an error occurs.
func (kgb *KeyGroupBy) ScanX(ctx context.Context, v interface{}) {
	if err := kgb.Scan(ctx, v); err != nil {
		panic(err)
	}
}

// Strings returns list of strings from group-by.
// It is only allowed when executing a group-by query with one field.
func (kgb *KeyGroupBy) Strings(ctx context.Context) ([]string, error) {
	if len(kgb.fields) > 1 {
		return nil, errors.New("ent: KeyGroupBy.Strings is not achievable when grouping more than 1 field")
	}
	var v []string
	if err := kgb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// StringsX is like Strings, but panics if an error occurs.
func (kgb *KeyGroupBy) StringsX(ctx context.Context) []string {
	v, err := kgb.Strings(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// String returns a single string from a group-by query.
// It is only allowed when executing a group-by query with one field.
func (kgb *KeyGroupBy) String(ctx context.Context) (_ string, err error) {
	var v []string
	if v, err = kgb.Strings(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{key.Label}
	default:
		err = fmt.Errorf("ent: KeyGroupBy.Strings returned %d results when one was expected", len(v))
	}
	return
}

// StringX is like String, but panics if an error occurs.
func (kgb *KeyGroupBy) StringX(ctx context.Context) string {
	v, err := kgb.String(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Ints returns list of ints from group-by.
// It is only allowed when executing a group-by query with one field.
func (kgb *KeyGroupBy) Ints(ctx context.Context) ([]int, error) {
	if len(kgb.fields) > 1 {
		return nil, errors.New("ent: KeyGroupBy.Ints is not achievable when grouping more than 1 field")
	}
	var v []int
	if err := kgb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// IntsX is like Ints, but panics if an error occurs.
func (kgb *KeyGroupBy) IntsX(ctx context.Context) []int {
	v, err := kgb.Ints(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Int returns a single int from a group-by query.
// It is only allowed when executing a group-by query with one field.
func (kgb *KeyGroupBy) Int(ctx context.Context) (_ int, err error) {
	var v []int
	if v, err = kgb.Ints(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{key.Label}
	default:
		err = fmt.Errorf("ent: KeyGroupBy.Ints returned %d results when one was expected", len(v))
	}
	return
}

// IntX is like Int, but panics if an error occurs.
func (kgb *KeyGroupBy) IntX(ctx context.Context) int {
	v, err := kgb.Int(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64s returns list of float64s from group-by.
// It is only allowed when executing a group-by query with one field.
func (kgb *KeyGroupBy) Float64s(ctx context.Context) ([]float64, error) {
	if len(kgb.fields) > 1 {
		return nil, errors.New("ent: KeyGroupBy.Float64s is not achievable when grouping more than 1 field")
	}
	var v []float64
	if err := kgb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// Float64sX is like Float64s, but panics if an error occurs.
func (kgb *KeyGroupBy) Float64sX(ctx context.Context) []float64 {
	v, err := kgb.Float64s(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64 returns a single float64 from a group-by query.
// It is only allowed when executing a group-by query with one field.
func (kgb *KeyGroupBy) Float64(ctx context.Context) (_ float64, err error) {
	var v []float64
	if v, err = kgb.Float64s(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{key.Label}
	default:
		err = fmt.Errorf("ent: KeyGroupBy.Float64s returned %d results when one was expected", len(v))
	}
	return
}

// Float64X is like Float64, but panics if an error occurs.
func (kgb *KeyGroupBy) Float64X(ctx context.Context) float64 {
	v, err := kgb.Float64(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bools returns list of bools from group-by.
// It is only allowed when executing a group-by query with one field.
func (kgb *KeyGroupBy) Bools(ctx context.Context) ([]bool, error) {
	if len(kgb.fields) > 1 {
		return nil, errors.New("ent: KeyGroupBy.Bools is not achievable when grouping more than 1 field")
	}
	var v []bool
	if err := kgb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// BoolsX is like Bools, but panics if an error occurs.
func (kgb *KeyGroupBy) BoolsX(ctx context.Context) []bool {
	v, err := kgb.Bools(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bool returns a single bool from a group-by query.
// It is only allowed when executing a group-by query with one field.
func (kgb *KeyGroupBy) Bool(ctx context.Context) (_ bool, err error) {
	var v []bool
	if v, err = kgb.Bools(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{key.Label}
	default:
		err = fmt.Errorf("ent: KeyGroupBy.Bools returned %d results when one was expected", len(v))
	}
	return
}

// BoolX is like Bool, but panics if an error occurs.
func (kgb *KeyGroupBy) BoolX(ctx context.Context) bool {
	v, err := kgb.Bool(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

func (kgb *KeyGroupBy) sqlScan(ctx context.Context, v interface{}) error {
	for _, f := range kgb.fields {
		if !key.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("invalid field %q for group-by", f)}
		}
	}
	selector := kgb.sqlQuery()
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := kgb.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

func (kgb *KeyGroupBy) sqlQuery() *sql.Selector {
	selector := kgb.sql
	columns := make([]string, 0, len(kgb.fields)+len(kgb.fns))
	columns = append(columns, kgb.fields...)
	for _, fn := range kgb.fns {
		columns = append(columns, fn(selector, key.ValidColumn))
	}
	return selector.Select(columns...).GroupBy(kgb.fields...)
}

// KeySelect is the builder for selecting fields of Key entities.
type KeySelect struct {
	*KeyQuery
	// intermediate query (i.e. traversal path).
	sql *sql.Selector
}

// Scan applies the selector query and scans the result into the given value.
func (ks *KeySelect) Scan(ctx context.Context, v interface{}) error {
	if err := ks.prepareQuery(ctx); err != nil {
		return err
	}
	ks.sql = ks.KeyQuery.sqlQuery(ctx)
	return ks.sqlScan(ctx, v)
}

// ScanX is like Scan, but panics if an error occurs.
func (ks *KeySelect) ScanX(ctx context.Context, v interface{}) {
	if err := ks.Scan(ctx, v); err != nil {
		panic(err)
	}
}

// Strings returns list of strings from a selector. It is only allowed when selecting one field.
func (ks *KeySelect) Strings(ctx context.Context) ([]string, error) {
	if len(ks.fields) > 1 {
		return nil, errors.New("ent: KeySelect.Strings is not achievable when selecting more than 1 field")
	}
	var v []string
	if err := ks.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// StringsX is like Strings, but panics if an error occurs.
func (ks *KeySelect) StringsX(ctx context.Context) []string {
	v, err := ks.Strings(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// String returns a single string from a selector. It is only allowed when selecting one field.
func (ks *KeySelect) String(ctx context.Context) (_ string, err error) {
	var v []string
	if v, err = ks.Strings(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{key.Label}
	default:
		err = fmt.Errorf("ent: KeySelect.Strings returned %d results when one was expected", len(v))
	}
	return
}

// StringX is like String, but panics if an error occurs.
func (ks *KeySelect) StringX(ctx context.Context) string {
	v, err := ks.String(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Ints returns list of ints from a selector. It is only allowed when selecting one field.
func (ks *KeySelect) Ints(ctx context.Context) ([]int, error) {
	if len(ks.fields) > 1 {
		return nil, errors.New("ent: KeySelect.Ints is not achievable when selecting more than 1 field")
	}
	var v []int
	if err := ks.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// IntsX is like Ints, but panics if an error occurs.
func (ks *KeySelect) IntsX(ctx context.Context) []int {
	v, err := ks.Ints(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Int returns a single int from a selector. It is only allowed when selecting one field.
func (ks *KeySelect) Int(ctx context.Context) (_ int, err error) {
	var v []int
	if v, err = ks.Ints(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{key.Label}
	default:
		err = fmt.Errorf("ent: KeySelect.Ints returned %d results when one was expected", len(v))
	}
	return
}

// IntX is like Int, but panics if an error occurs.
func (ks *KeySelect) IntX(ctx context.Context) int {
	v, err := ks.Int(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64s returns list of float64s from a selector. It is only allowed when selecting one field.
func (ks *KeySelect) Float64s(ctx context.Context) ([]float64, error) {
	if len(ks.fields) > 1 {
		return nil, errors.New("ent: KeySelect.Float64s is not achievable when selecting more than 1 field")
	}
	var v []float64
	if err := ks.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// Float64sX is like Float64s, but panics if an error occurs.
func (ks *KeySelect) Float64sX(ctx context.Context) []float64 {
	v, err := ks.Float64s(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64 returns a single float64 from a selector. It is only allowed when selecting one field.
func (ks *KeySelect) Float64(ctx context.Context) (_ float64, err error) {
	var v []float64
	if v, err = ks.Float64s(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{key.Label}
	default:
		err = fmt.Errorf("ent: KeySelect.Float64s returned %d results when one was expected", len(v))
	}
	return
}

// Float64X is like Float64, but panics if an error occurs.
func (ks *KeySelect) Float64X(ctx context.Context) float64 {
	v, err := ks.Float64(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bools returns list of bools from a selector. It is only allowed when selecting one field.
func (ks *KeySelect) Bools(ctx context.Context) ([]bool, error) {
	if len(ks.fields) > 1 {
		return nil, errors.New("ent: KeySelect.Bools is not achievable when selecting more than 1 field")
	}
	var v []bool
	if err := ks.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// BoolsX is like Bools, but panics if an error occurs.
func (ks *KeySelect) BoolsX(ctx context.Context) []bool {
	v, err := ks.Bools(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bool returns a single bool from a selector. It is only allowed when selecting one field.
func (ks *KeySelect) Bool(ctx context.Context) (_ bool, err error) {
	var v []bool
	if v, err = ks.Bools(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{key.Label}
	default:
		err = fmt.Errorf("ent: KeySelect.Bools returned %d results when one was expected", len(v))
	}
	return
}

// BoolX is like Bool, but panics if an error occurs.
func (ks *KeySelect) BoolX(ctx context.Context) bool {
	v, err := ks.Bool(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

func (ks *KeySelect) sqlScan(ctx context.Context, v interface{}) error {
	rows := &sql.Rows{}
	query, args := ks.sqlQuery().Query()
	if err := ks.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

func (ks *KeySelect) sqlQuery() sql.Querier {
	selector := ks.sql
	selector.Select(selector.Columns(ks.fields...)...)
	return selector
}
